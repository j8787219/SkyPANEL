<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{&quot;currentConversationId&quot;:&quot;67f52a92-49bf-400c-bde0-4af23ddc0006&quot;,&quot;conversations&quot;:{&quot;ceff7330-71cc-4a8b-bb6c-f5365df09e1f&quot;:{&quot;id&quot;:&quot;ceff7330-71cc-4a8b-bb6c-f5365df09e1f&quot;,&quot;createdAtIso&quot;:&quot;2025-06-09T14:29:04.120Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-09T14:29:04.120Z&quot;,&quot;chatHistory&quot;:[],&quot;feedbackStates&quot;:{},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;Please analyze the billing system implementation in the SkyPANEL codebase and explain:\r\n\r\n1. How billing cycles and deductions are currently handled in the system\r\n2. The relationship between USD pricing and custom credits (specifically if there's a 1:1 conversion rate)\r\n3. For a $5/month plan with 30-day billing cycles, calculate the daily deduction amount in custom credits\r\n4. Identify which files contain the billing logic, payment processing, and custom credit management\r\n5. Show relevant code snippets that demonstrate how daily/hourly deductions are calculated and processed\r\n6. Explain if billing is prorated, how billing cycles start (monthly vs user creation date), and any special handling for custom credit transactions\r\n\r\nFocus on the actual implementation details from the codebase rather than theoretical explanations.&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Please analyze the billing system implementation in the SkyPANEL codebase and explain:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;1. How billing cycles and deductions are currently handled in the system\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;2. The relationship between USD pricing and custom credits (specifically if there's a 1:1 conversion rate)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;3. For a $5/month plan with 30-day billing cycles, calculate the daily deduction amount in custom credits\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;4. Identify which files contain the billing logic, payment processing, and custom credit management\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;5. Show relevant code snippets that demonstrate how daily/hourly deductions are calculated and processed\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;6. Explain if billing is prorated, how billing cycles start (monthly vs user creation date), and any special handling for custom credit transactions\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Focus on the actual implementation details from the codebase rather than theoretical explanations.&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;status&quot;:&quot;draft&quot;},&quot;draftActiveContextIds&quot;:[&quot;C:/Users/moran/Documents/GitHub/SkyPANELfalsefalse&quot;,&quot;userGuidelines&quot;],&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:false,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;599f283c-b78e-4898-88ff-ad6f5ea0b504&quot;},&quot;1bfb89fd-cea2-4e31-b362-17a042d8a1a8&quot;:{&quot;id&quot;:&quot;1bfb89fd-cea2-4e31-b362-17a042d8a1a8&quot;,&quot;createdAtIso&quot;:&quot;2025-06-09T14:37:26.183Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-09T14:37:26.183Z&quot;,&quot;chatHistory&quot;:[],&quot;feedbackStates&quot;:{},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;Please analyze the billing system implementation in the SkyPANEL codebase and explain:\r\n\r\n1. How billing cycles and deductions are currently handled in the system\r\n2. The relationship between USD pricing and custom credits (specifically if there's a 1:1 conversion rate)\r\n3. For a $5/month plan with 30-day billing cycles, calculate the daily deduction amount in custom credits\r\n4. Identify which files contain the billing logic, payment processing, and custom credit management\r\n5. Show relevant code snippets that demonstrate how daily/hourly deductions are calculated and processed\r\n6. Explain if billing is prorated, how billing cycles start (monthly vs user creation date), and any special handling for custom credit transactions\r\n\r\nFocus on the actual implementation details from the codebase rather than theoretical explanations.&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Please analyze the billing system implementation in the SkyPANEL codebase and explain:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;1. How billing cycles and deductions are currently handled in the system\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;2. The relationship between USD pricing and custom credits (specifically if there's a 1:1 conversion rate)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;3. For a $5/month plan with 30-day billing cycles, calculate the daily deduction amount in custom credits\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;4. Identify which files contain the billing logic, payment processing, and custom credit management\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;5. Show relevant code snippets that demonstrate how daily/hourly deductions are calculated and processed\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;6. Explain if billing is prorated, how billing cycles start (monthly vs user creation date), and any special handling for custom credit transactions\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Focus on the actual implementation details from the codebase rather than theoretical explanations.&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;status&quot;:&quot;draft&quot;},&quot;draftActiveContextIds&quot;:[&quot;C:/Users/moran/Documents/GitHub/SkyPANELfalsefalse&quot;,&quot;userGuidelines&quot;],&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:false,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0},&quot;b344dd94-a9fe-4933-9c32-f6c79fba87c0&quot;:{&quot;id&quot;:&quot;b344dd94-a9fe-4933-9c32-f6c79fba87c0&quot;,&quot;createdAtIso&quot;:&quot;2025-06-09T14:37:26.198Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-09T14:56:43.442Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;71e9d8d8-69d4-4d60-9a5e-5e4dd9e66a96&quot;,&quot;request_message&quot;:&quot;Please analyze the billing system implementation in the SkyPANEL codebase and explain:\r\n\r\n1. How billing cycles and deductions are currently handled in the system\r\n2. The relationship between USD pricing and custom credits (specifically if there's a 1:1 conversion rate)\r\n3. For a $5/month plan with 30-day billing cycles, calculate the daily deduction amount in custom credits\r\n4. Identify which files contain the billing logic, payment processing, and custom credit management\r\n5. Show relevant code snippets that demonstrate how daily/hourly deductions are calculated and processed\r\n6. Explain if billing is prorated, how billing cycles start (monthly vs user creation date), and any special handling for custom credit transactions\r\n\r\nFocus on the actual implementation details from the codebase rather than theoretical explanations.&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Please analyze the billing system implementation in the SkyPANEL codebase and explain:\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;1. How billing cycles and deductions are currently handled in the system\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;2. The relationship between USD pricing and custom credits (specifically if there's a 1:1 conversion rate)\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;3. For a $5/month plan with 30-day billing cycles, calculate the daily deduction amount in custom credits\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;4. Identify which files contain the billing logic, payment processing, and custom credit management\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;5. Show relevant code snippets that demonstrate how daily/hourly deductions are calculated and processed\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;6. Explain if billing is prorated, how billing cycles start (monthly vs user creation date), and any special handling for custom credit transactions\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\r&quot;},{&quot;type&quot;:&quot;hardBreak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Focus on the actual implementation details from the codebase rather than theoretical explanations.&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01QufCw2kMsHSAxmDzQBjvcz&quot;,&quot;tool_name&quot;:&quot;codebase-retrieval&quot;,&quot;input_json&quot;:&quot;{\&quot;information_request\&quot;: \&quot;billing system implementation, billing cycles, payment processing, custom credits management, daily deductions, hourly deductions, billing logic, payment methods, subscription handling, prorated billing, billing cycle start dates\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I'll analyze the billing system implementation in the SkyPANEL codebase. Let me start by gathering information about the billing system, payment processing, and custom credit management.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;Please analyze the billing system implementation in the SkyPANEL codebase and explain:\r\n\r\n1. How billing cycles and deductions are currently handled in the system\r\n2. The relationship between USD pricing and custom credits (specifically if there's a 1:1 conversion rate)\r\n3. For a $5/month plan with 30-day billing cycles, calculate the daily deduction amount in custom credits\r\n4. Identify which files contain the billing logic, payment processing, and custom credit management\r\n5. Show relevant code snippets that demonstrate how daily/hourly deductions are calculated and processed\r\n6. Explain if billing is prorated, how billing cycles start (monthly vs user creation date), and any special handling for custom credit transactions\r\n\r\nFocus on the actual implementation details from the codebase rather than theoretical explanations.&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;,&quot;folderRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-09T14:39:00.517Z&quot;,&quot;response_text&quot;:&quot;I'll analyze the billing system implementation in the SkyPANEL codebase. Let me start by gathering information about the billing system, payment processing, and custom credit management.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;a85ac85f-f0ff-47be-975c-622d0a8ac1e3&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01CYhHjMugmBkUM7uUzdiWkf&quot;,&quot;tool_name&quot;:&quot;codebase-retrieval&quot;,&quot;input_json&quot;:&quot;{\&quot;information_request\&quot;: \&quot;daily deduction calculations, hourly billing, billing cycle start dates, prorated billing calculations, USD to custom credits conversion rate, monthly billing cycles, billing cycle end dates, custom credits pricing, VirtFusion tokens conversion, billing frequency\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me get more specific information about the billing cycle calculations, daily deductions, and the relationship between USD and custom credits.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;The following code sections were retrieved:\nPath: server/routes_new.ts\n...\n  4113\t\n  4114\t  // Add VirtFusion tokens via PayPal\n  4115\t  app.post(\&quot;/api/billing/add-credits\&quot;, isAuthenticated, async (req, res) =&gt; {\n  4116\t    try {\n  4117\t      const { amount, paymentId, verificationData } = req.body;\n  4118\t\n  4119\t      console.log(`Processing VirtFusion token purchase: amount=${amount}, paymentId=${paymentId}`);\n  4120\t\n  4121\t      if (!amount || amount &lt;= 0 || !paymentId) {\n  4122\t        console.log(\&quot;Invalid token purchase request - missing amount or paymentId\&quot;);\n  4123\t        return res.status(400).json({ error: \&quot;Invalid amount or payment ID\&quot; });\n  4124\t      }\n  4125\t\n  4126\t      // Validate amount limits (minimum $1, maximum $1000)\n  4127\t      if (amount &lt; 1) {\n  4128\t        console.log(`Amount too low: ${amount}`);\n  4129\t        return res.status(400).json({ error: \&quot;Minimum amount is $1.00\&quot; });\n  4130\t      }\n...\n  4241\t\n  4242\t        // Format the data for VirtFusion API\n  4243\t        const tokenData = {\n  4244\t          tokens: tokens,\n  4245\t          reference_1: createdTransaction.id,\n  4246\t          reference_2: `PayPal payment ID: ${paymentId}`\n  4247\t        };\n  4248\t\n  4249\t        console.log(`Sending to VirtFusion API with extRelationId=${extRelationId}:`, tokenData);\n  4250\t\n  4251\t        // Call the VirtFusion API to add tokens\n  4252\t        const virtFusionResult = await virtFusionApi.addCreditToUser(\n  4253\t          extRelationId,\n  4254\t          tokenData\n  4255\t        );\n...\n  4272\t\n  4273\t        // Get user's balance AFTER adding tokens to detect negative balance deduction\n  4274\t        try {\n  4275\t          console.log(\&quot;Fetching user's updated VirtFusion balance\&quot;);\n  4276\t          const updatedBalanceData = await virtFusionApi.getUserHourlyStats(req.user!.id);\n  4277\t          \n  4278\t          if (updatedBalanceData?.data?.credit?.tokens) {\n  4279\t            const updatedTokens = parseFloat(updatedBalanceData.data.credit.tokens);\n  4280\t            const updatedBalance = updatedTokens / 100; // Convert tokens to dollars\n  4281\t            console.log(`User's updated balance: ${updatedBalance.toFixed(2)} USD (${updatedTokens} tokens)`);\n  4282\t            \n  4283\t            // Calculate the expected balance increase\n  4284\t            const expectedBalance = initialBalance + amount;\n  4285\t            console.log(`Expected balance after adding $${amount}: $${expectedBalance.toFixed(2)}`);\n  4286\t               // Check if there was a negative balance deduction\n  4287\t          if (initialBalance &lt; 0) {\n  4288\t            // When initial balance is negative, calculate how much was actually deducted\n  4289\t            // If the user had -$3.50 and added $5.00, they should have $1.50\n  4290\t            // But if VirtFusion deducted the negative balance, they might have less\n  4291\t            const expectedBalance = initialBalance + amount;\n  4292\t            \n  4293\t            // Force the deduction amount to be at least the absolute value of the negative balance\n  4294\t            // This ensures we always show the proper amount that was deducted to cover the negative balance\n  4295\t            const deductionAmount = Math.abs(initialBalance); // Use the actual negative balance amount\n  4296\t            \n  4297\t            console.log(`Initial balance: $${initialBalance.toFixed(2)}`);\n  4298\t            console.log(`Added amount: $${amount.toFixed(2)}`);\n  4299\t            console.log(`Expected balance: $${expectedBalance.toFixed(2)}`);\n  4300\t            console.log(`Actual balance: $${updatedBalance.toFixed(2)}`);\n  4301\t            console.log(`Deduction amount: $${deductionAmount.toFixed(2)}`);\n...\n  4572\t\n  4573\t      if (existingActiveSubscriptions.length &gt; 0) {\n  4574\t        // Check if they already have this specific plan\n  4575\t        const hasThisPlan = existingActiveSubscriptions.some(sub =&gt; sub.planId === planId);\n  4576\t        if (hasThisPlan) {\n  4577\t          return res.status(400).json({ error: \&quot;You already have an active subscription for this plan\&quot; });\n  4578\t        } else {\n  4579\t          // They have a different plan - redirect to change endpoint\n  4580\t          return res.status(400).json({\n  4581\t            error: \&quot;You already have an active DNS plan. Use the plan change feature to upgrade or downgrade.\&quot;,\n  4582\t            shouldUseChangeEndpoint: true,\n  4583\t            currentPlans: existingActiveSubscriptions.map(sub =&gt; sub.planId)\n  4584\t          });\n  4585\t        }\n  4586\t      }\n  4587\t\n  4588\t      // Get user's custom credits balance\n  4589\t      const [userCredits] = await db.select()\n  4590\t        .from(userCreditsTable)\n  4591\t        .where(eq(userCreditsTable.userId, userId))\n  4592\t        .limit(1);\n...\n  4603\t\n  4604\t      const newBalance = currentBalance - plan.price;\n  4605\t      const now = new Date();\n  4606\t\n  4607\t      // Calculate billing cycle end date - always end on the last day of the current month\n  4608\t      // This ensures monthly billing cycles align with calendar months starting on the 1st\n  4609\t      const endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // Last day of current month\n  4610\t      const nextPaymentDate = new Date(endDate.getTime() - 3 * 24 * 60 * 60 * 1000); // 3 days before expiry\n  4611\t\n  4612\t      // Get dynamic custom credits name for transaction description\n  4613\t      const customCreditsName = await getCustomCreditsName();\n...\n  4644\t\n  4645\t        // Create credit transaction record (audit trail)\n  4646\t        await tx.insert(creditTransactionsTable).values({\n  4647\t          userId: userId,\n  4648\t          amount: -plan.price, // Negative for debit\n  4649\t          type: 'dns_plan_purchase',\n  4650\t          description: `DNS Plan Purchase: ${plan.name} using ${customCreditsName}`,\n  4651\t          status: 'completed',\n  4652\t          paymentMethod: customCreditsName.toLowerCase().replace(/\\s+/g, '_'),\n  4653\t          balanceBefore: currentBalance,\n  4654\t          balanceAfter: newBalance,\n  4655\t          metadata: {\n  4656\t            planId: plan.id,\n  4657\t            planName: plan.name,\n  4658\t            mainTransactionId: createdTransaction.id\n  4659\t          }\n  4660\t        });\n  4661\t\n  4662\t        // Create DNS plan subscription\n  4663\t        await tx.insert(dnsPlanSubscriptionsTable).values({\n  4664\t          userId: userId,\n  4665\t          planId: plan.id,\n  4666\t          status: 'active',\n  4667\t          startDate: now,\n  4668\t          endDate: endDate,\n  4669\t          autoRenew: true,\n  4670\t          lastPaymentDate: now,\n  4671\t          nextPaymentDate: nextPaymentDate\n  4672\t        });\n  4673\t      });\n...\n  4739\t\n  4740\t      if (activeSubscriptions.length === 0) {\n  4741\t        return res.status(404).json({ error: \&quot;No active DNS plan subscription found\&quot; });\n  4742\t      }\n  4743\t\n  4744\t      // Check if user already has the target plan\n  4745\t      const hasTargetPlan = activeSubscriptions.some(sub =&gt; sub.planId === planId);\n  4746\t      if (hasTargetPlan) {\n  4747\t        return res.status(400).json({ error: \&quot;You are already subscribed to this plan\&quot; });\n  4748\t      }\n  4749\t\n  4750\t      // For billing calculation, use the highest-tier current plan\n  4751\t      const currentSubscription = activeSubscriptions.sort((a, b) =&gt; b.plan!.price - a.plan!.price)[0];\n  4752\t\n  4753\t      const currentPlan = currentSubscription.plan!;\n  4754\t\n  4755\t      // Calculate prorated amount based on proper monthly billing cycle\n  4756\t      // For Free plans with far-future endDate, calculate from now to end of current month\n  4757\t      const now = new Date();\n  4758\t      let billingCycleEndDate;\n...\n  5029\t\n  5030\t        // CRITICAL FIX: Cancel ALL existing active subscriptions to enforce single-plan-per-user\n  5031\t        const activeSubscriptionIds = activeSubscriptions.map(sub =&gt; sub.id);\n  5032\t        await tx.update(dnsPlanSubscriptionsTable)\n  5033\t          .set({\n  5034\t            status: 'cancelled',\n  5035\t            autoRenew: false,\n  5036\t            updatedAt: now\n  5037\t          })\n  5038\t          .where(inArray(dnsPlanSubscriptionsTable.id, activeSubscriptionIds));\n  5039\t\n  5040\t        // Create a new subscription for the target plan\n  5041\t        await tx.insert(dnsPlanSubscriptionsTable).values({\n  5042\t          userId: userId,\n  5043\t          planId: newPlan.id,\n  5044\t          status: 'active',\n  5045\t          startDate: now,\n  5046\t          endDate: endDate,\n  5047\t          autoRenew: true,\n  5048\t          lastPaymentDate: now,\n  5049\t          nextPaymentDate: nextPaymentDate\n  5050\t        });\n  5051\t      });\n...\n  5252\t\n  5253\t  // Add custom credits via PayPal\n  5254\t  app.post(\&quot;/api/billing/custom-credits/add\&quot;, isAuthenticated, async (req, res) =&gt; {\n  5255\t    try {\n  5256\t      const { amount, paymentId, verificationData } = req.body;\n  5257\t\n  5258\t      console.log(`Processing custom credit purchase: amount=${amount}, paymentId=${paymentId}`);\n  5259\t\n  5260\t      if (!amount || amount &lt;= 0 || !paymentId) {\n  5261\t        console.log(\&quot;Invalid custom credit purchase request - missing amount or paymentId\&quot;);\n  5262\t        return res.status(400).json({ error: \&quot;Invalid amount or payment ID\&quot; });\n  5263\t      }\n  5264\t\n  5265\t      // Validate amount limits (minimum $1, maximum $1000)\n  5266\t      if (amount &lt; 1) {\n  5267\t        console.log(`Amount too low: ${amount}`);\n  5268\t        return res.status(400).json({ error: \&quot;Minimum amount is $1.00\&quot; });\n  5269\t      }\n  5270\t\n  5271\t      if (amount &gt; 1000) {\n  5272\t        console.log(`Amount too high: ${amount}`);\n  5273\t        return res.status(400).json({ error: \&quot;Maximum amount is $1000.00\&quot; });\n  5274\t      }\n  5275\t\n  5276\t      // Get dynamic custom credits name for transaction description\n  5277\t      const customCreditsName = await getCustomCreditsName();\n  5278\t\n  5279\t      // Create a new transaction record in the main transactions table for unified history\n  5280\t      const transaction: InsertTransaction = {\n  5281\t        userId: req.user!.id,\n  5282\t        amount: amount,\n  5283\t        type: \&quot;custom_credit\&quot;,\n  5284\t        description: `${customCreditsName} purchase via PayPal`,\n  5285\t        status: \&quot;pending\&quot;,\n  5286\t        paymentMethod: \&quot;paypal\&quot;,\n  5287\t        paymentId: paymentId,\n  5288\t      };\n...\n  7581\t\n  7582\t      // Get user's balance AFTER adding tokens to detect negative balance deduction\n  7583\t      try {\n  7584\t        console.log(\&quot;Fetching user's updated VirtFusion balance\&quot;);\n  7585\t        const updatedBalanceData = await api.getUserHourlyStats(userId);\n  7586\t        \n  7587\t        if (updatedBalanceData?.data?.credit?.tokens) {\n  7588\t          const updatedTokens = parseFloat(updatedBalanceData.data.credit.tokens);\n  7589\t          const updatedBalance = updatedTokens / 100; // Convert tokens to dollars\n  7590\t          console.log(`User's updated balance: ${updatedBalance.toFixed(2)} USD (${updatedTokens} tokens)`);\n  7591\t          \n  7592\t          // Calculate the expected balance increase\n  7593\t          const addedAmount = Number(amount) / 100; // Convert tokens to dollars\n  7594\t          const expectedBalance = initialBalance + addedAmount;\n  7595\t          console.log(`Expected balance after adding $${addedAmount}: $${expectedBalance.toFixed(2)}`);\n...\n  7615\t              \n  7616\t              console.log(\&quot;Creating deduction transaction record:\&quot;, deductionTransaction);\n  7617\t              const createdDeductionTransaction = await storage.createTransaction(deductionTransaction);\n  7618\t              console.log(\&quot;Deduction transaction created with ID:\&quot;, createdDeductionTransaction.id);\n  7619\t            }\n  7620\t          } else {\n  7621\t            console.log(\&quot;No negative balance deduction detected\&quot;);\n  7622\t          }\n  7623\t        } else {\n  7624\t          console.log(\&quot;Could not determine user's updated balance\&quot;);\n  7625\t        }\n  7626\t      } catch (balanceError) {\n  7627\t        console.error(\&quot;Error fetching updated balance:\&quot;, balanceError);\n  7628\t        // Continue without creating deduction record if we can't fetch the updated balance\n  7629\t      }\n...\nPath: md-docs/billing-system.md\n     1\t# Billing System\n     2\t\n     3\t## Overview\n     4\tThe Billing System in SkyPANEL manages all financial transactions, subscriptions, and invoicing for the platform. It integrates with payment gateways, tracks usage, and handles billing cycles for both customers and administrators.\n     5\t\n     6\t## Table of Contents\n     7\t- [Features](#features)\n     8\t- [Architecture](#architecture)\n     9\t- [Pricing Models](#pricing-models)\n    10\t- [Payment Gateways](#payment-gateways)\n    11\t- [Subscription Management](#subscription-management)\n    12\t- [Invoicing](#invoicing)\n    13\t- [Usage Tracking](#usage-tracking)\n    14\t- [Tax Handling](#tax-handling)\n    15\t- [Reporting](#reporting)\n    16\t- [Security](#security)\n    17\t- [Error Handling](#error-handling)\n    18\t- [Configuration](#configuration)\n    19\t\n    20\t## Features\n...\n    33\t\n    34\t### Components\n    35\t- **BillingService**: Core billing logic\n    36\t- **PaymentProcessor**: Handles payment gateway integration\n    37\t- **InvoiceGenerator**: Creates and manages invoices\n    38\t- **UsageTracker**: Tracks resource usage for billing\n    39\t- **TaxCalculator**: Handles tax calculations\n    40\t- **NotificationService**: Sends billing-related notifications\n    41\t\n    42\t### Data Flow\n    43\t1. Subscription created/updated\n    44\t2. Usage data collected\n    45\t3. Billing cycle ends\n    46\t4. Invoice generated\n    47\t5. Payment processed\n    48\t6. Receipt sent\n    49\t7. Records updated\n    50\t\n    51\t## Pricing Models\n    52\t\n    53\t### Subscription Plans\n    54\t1. **Fixed Price**\n    55\t   - Monthly/Annual billing\n    56\t   - Feature-based tiers\n    57\t   - Flat rate per period\n    58\t\n    59\t2. **Usage-Based**\n    60\t   - Pay-per-use pricing\n    61\t   - Tiered pricing\n    62\t   - Overage charges\n...\nPath: client/src/pages/billing-page.tsx\n...\n   118\t\n   119\t\n   120\t\n   121\t  // Fetch balance data (both VirtFusion tokens and custom credits)\n   122\t  const { data: balanceData } = useQuery&lt;{\n   123\t    virtFusionCredits: number,\n   124\t    virtFusionTokens: number,\n   125\t    customCredits: number\n   126\t  }&gt;({\n   127\t    queryKey: [\&quot;/api/billing/balance\&quot;],\n   128\t  });\n   129\t\n   130\t  // Fetch VirtFusion usage data for last 30 days\n   131\t  const { data: usageData, isError: usageError, error: usageErrorData } = useQuery&lt;{ usage: number, rawData: any }&gt;({\n   132\t    queryKey: [\&quot;/api/billing/usage/last30days\&quot;],\n   133\t    staleTime: 300000, // 5 minutes\n   134\t  });\n   135\t\n   136\t  // Log usage data when it changes\n   137\t  React.useEffect(() =&gt; {\n   138\t    if (usageData) {\n   139\t      console.log(\&quot;VirtFusion usage data:\&quot;, usageData);\n   140\t    }\n   141\t    if (usageError) {\n   142\t      console.error(\&quot;VirtFusion usage API error:\&quot;, usageErrorData);\n   143\t    }\n   144\t  }, [usageData, usageError, usageErrorData]);\n...\n   250\t\n   251\t  // Calculate billing summary combining both VirtFusion and custom credit data\n   252\t  const hasVirtFusionBalance = balanceData?.virtFusionCredits &amp;&amp; balanceData.virtFusionCredits &gt; 0;\n   253\t\n   254\t  // Calculate the spent and added amounts for the last 30 days from transactions (includes both VirtFusion and custom credits)\n   255\t  const spentFromTransactions = transactions\n   256\t    .filter(t =&gt; isDebit(t) &amp;&amp; new Date(t.createdAt) &gt; new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))\n   257\t    .reduce((sum, t) =&gt; sum + Math.abs(t.amount), 0);\n   258\t\n   259\t  const addedFromTransactions = transactions\n   260\t    .filter(t =&gt; isCredit(t) &amp;&amp; new Date(t.createdAt) &gt; new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))\n   261\t    .reduce((sum, t) =&gt; sum + Math.abs(t.amount), 0);\n   262\t\n   263\t  const summaryData = {\n   264\t    // Use VirtFusion balance only - use nullish coalescing to preserve negative balances\n   265\t    balance: balanceData?.virtFusionCredits ?? 0,\n   266\t    virtFusionTokens: balanceData?.virtFusionTokens ?? 0,\n   267\t\n   268\t    // Combine VirtFusion API usage data with all transaction-based spending (VirtFusion + custom credits)\n   269\t    spent30Days: ((usageData &amp;&amp; 'usage' in usageData) ? usageData.usage : 0) + spentFromTransactions,\n   270\t    added30Days: addedFromTransactions,\n   271\t  };\n...\nPath: client/src/components/billing/CustomCreditsPayPalCheckout.tsx\n...\n    33\t    onSuccess: (data) =&gt; {\n    34\t      setIsProcessing(false);\n    35\t      toast({\n    36\t        title: \&quot;Credits Added Successfully!\&quot;,\n    37\t        description: `$${amount.toFixed(2)} has been added to your ${brandingData?.custom_credits_name?.toLowerCase() || 'custom credits'} balance.`,\n    38\t      });\n    39\t\n    40\t      // Invalidate queries to refresh balance and transactions\n    41\t      queryClient.invalidateQueries({ queryKey: [\&quot;/api/billing/balance\&quot;] });\n    42\t      queryClient.invalidateQueries({ queryKey: [\&quot;/api/billing/custom-credits/transactions\&quot;] });\n    43\t      queryClient.invalidateQueries({ queryKey: [\&quot;/api/transactions\&quot;] }); // Refresh main transactions list\n    44\t    },\n    45\t    onError: (error: any) =&gt; {\n    46\t      setIsProcessing(false);\n    47\t      toast({\n    48\t        title: \&quot;Payment Processing Failed\&quot;,\n    49\t        description: error.message || \&quot;Failed to process payment\&quot;,\n    50\t        variant: \&quot;destructive\&quot;,\n    51\t      });\n    52\t    }\n    53\t  });\n    54\t\n    55\t  const handlePayPalSuccess = async (details: any) =&gt; {\n    56\t    setIsProcessing(true);\n    57\t    \n    58\t    try {\n    59\t      // First verify the payment with PayPal\n    60\t      const verifyResponse = await fetch(\&quot;/api/billing/verify-paypal-payment\&quot;, {\n    61\t        method: \&quot;POST\&quot;,\n    62\t        headers: { \&quot;Content-Type\&quot;: \&quot;application/json\&quot; },\n    63\t        body: JSON.stringify({ orderId: details.id }),\n    64\t      });\n    65\t\n    66\t      if (!verifyResponse.ok) {\n    67\t        throw new Error(\&quot;Payment verification failed\&quot;);\n    68\t      }\n    69\t\n    70\t      const verificationData = await verifyResponse.json();\n    71\t      \n    72\t      // Then add custom credits\n    73\t      await addCustomCreditsMutation.mutateAsync({\n    74\t        amount,\n    75\t        paymentId: details.id,\n    76\t        verificationData,\n    77\t      });\n    78\t    } catch (error: any) {\n    79\t      toast({\n    80\t        title: \&quot;Payment Processing Error\&quot;,\n    81\t        description: error.message || \&quot;Failed to process payment\&quot;,\n    82\t        variant: \&quot;destructive\&quot;,\n    83\t      });\n    84\t      setIsProcessing(false);\n    85\t    }\n    86\t  };\n...\nPath: md-docs/dual-billing-system.md\n...\n    37\t\n    38\t#### `dns_plans`\n    39\t- Pricing structure for DNS service tiers\n    40\t- Three default plans: Basic ($5), Pro ($15), Enterprise ($50)\n    41\t- Configurable features and limits\n    42\t\n    43\t#### `dns_plan_subscriptions`\n    44\t- User subscription management for DNS plans\n    45\t- Tracks subscription status, dates, and auto-renewal settings\n    46\t\n    47\t## API Endpoints\n    48\t\n    49\t### Enhanced Billing Endpoints\n    50\t\n    51\t#### `GET /api/billing/balance`\n    52\t- Returns both VirtFusion tokens AND custom credits\n    53\t- Unified balance response for frontend\n    54\t\n    55\t#### `POST /api/billing/custom-credits/add`\n    56\t- PayPal integration for custom credit purchases\n    57\t- Server-side payment verification\n    58\t- Amount validation ($1-$1000 range)\n    59\t- Transaction logging with audit trail\n...\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01QufCw2kMsHSAxmDzQBjvcz&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;,&quot;folderRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-09T14:39:10.515Z&quot;,&quot;response_text&quot;:&quot;Let me get more specific information about the billing cycle calculations, daily deductions, and the relationship between USD and custom credits.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;f40aaa6e-516d-40db-9dfa-01deb76587d2&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_019xkjLb6espb2uimqsbVZGv&quot;,&quot;tool_name&quot;:&quot;codebase-retrieval&quot;,&quot;input_json&quot;:&quot;{\&quot;information_request\&quot;: \&quot;database schema for billing, user_credits table, credit_transactions table, dns_plans table pricing, transactions table, billing database structure, credit balance management, transaction types\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me look for more specific information about the database schema and transaction handling to understand the complete billing structure.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;The following code sections were retrieved:\nPath: server/routes_new.ts\n...\n  4603\t\n  4604\t      const newBalance = currentBalance - plan.price;\n  4605\t      const now = new Date();\n  4606\t\n  4607\t      // Calculate billing cycle end date - always end on the last day of the current month\n  4608\t      // This ensures monthly billing cycles align with calendar months starting on the 1st\n  4609\t      const endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // Last day of current month\n  4610\t      const nextPaymentDate = new Date(endDate.getTime() - 3 * 24 * 60 * 60 * 1000); // 3 days before expiry\n  4611\t\n  4612\t      // Get dynamic custom credits name for transaction description\n  4613\t      const customCreditsName = await getCustomCreditsName();\n...\n  4739\t\n  4740\t      if (activeSubscriptions.length === 0) {\n  4741\t        return res.status(404).json({ error: \&quot;No active DNS plan subscription found\&quot; });\n  4742\t      }\n  4743\t\n  4744\t      // Check if user already has the target plan\n  4745\t      const hasTargetPlan = activeSubscriptions.some(sub =&gt; sub.planId === planId);\n  4746\t      if (hasTargetPlan) {\n  4747\t        return res.status(400).json({ error: \&quot;You are already subscribed to this plan\&quot; });\n  4748\t      }\n  4749\t\n  4750\t      // For billing calculation, use the highest-tier current plan\n  4751\t      const currentSubscription = activeSubscriptions.sort((a, b) =&gt; b.plan!.price - a.plan!.price)[0];\n  4752\t\n  4753\t      const currentPlan = currentSubscription.plan!;\n  4754\t\n  4755\t      // Calculate prorated amount based on proper monthly billing cycle\n  4756\t      // For Free plans with far-future endDate, calculate from now to end of current month\n  4757\t      const now = new Date();\n  4758\t      let billingCycleEndDate;\n  4759\t\n  4760\t      if (currentSubscription.endDate.getFullYear() &gt; 2050) {\n  4761\t        // This is a Free plan with far-future endDate, calculate proper monthly cycle\n  4762\t        billingCycleEndDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // End of current month\n  4763\t      } else {\n  4764\t        // This is a paid plan with proper billing cycle\n  4765\t        billingCycleEndDate = new Date(currentSubscription.endDate);\n  4766\t      }\n  4767\t\n  4768\t      const daysRemaining = Math.max(0, Math.ceil((billingCycleEndDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));\n  4769\t      const proratedAmount = (newPlan.price - currentPlan.price) * (daysRemaining / 30);\n  4770\t\n  4771\t      const isUpgrade = newPlan.price &gt; currentPlan.price;\n  4772\t      const isDowngrade = newPlan.price &lt; currentPlan.price;\n  4773\t      const isFreeDowngrade = newPlan.price === 0;\n  4774\t\n  4775\t      // For upgrades, check if user has sufficient credits\n  4776\t      if (isUpgrade &amp;&amp; proratedAmount &gt; 0) {\n  4777\t        // Get user credits\n  4778\t        const [userCredits] = await db.select()\n  4779\t          .from(userCreditsTable)\n  4780\t          .where(eq(userCreditsTable.userId, userId))\n  4781\t          .limit(1);\n  4782\t\n  4783\t        const currentBalance = userCredits?.balance || 0;\n  4784\t\n  4785\t        if (currentBalance &lt; proratedAmount) {\n  4786\t          return res.status(400).json({\n  4787\t            error: \&quot;Insufficient custom credits for upgrade\&quot;,\n  4788\t            required: proratedAmount,\n  4789\t            available: currentBalance,\n  4790\t            shortfall: proratedAmount - currentBalance\n  4791\t          });\n  4792\t        }\n  4793\t      }\n...\n  4852\t\n  4853\t          // Create credit transaction record (audit trail)\n  4854\t          await tx.insert(creditTransactionsTable).values({\n  4855\t            userId: userId,\n  4856\t            amount: -proratedAmount,\n  4857\t            type: isUpgrade ? 'dns_plan_upgrade' : 'dns_plan_downgrade',\n  4858\t            description: transactionDescription,\n  4859\t            status: 'completed',\n  4860\t            paymentMethod: customCreditsName.toLowerCase().replace(/\\s+/g, '_'),\n  4861\t            balanceBefore: currentBalance,\n  4862\t            balanceAfter: newBalance,\n  4863\t            metadata: {\n  4864\t              oldPlanId: currentPlan.id,\n  4865\t              oldPlanName: currentPlan.name,\n  4866\t              newPlanId: newPlan.id,\n  4867\t              newPlanName: newPlan.name,\n  4868\t              daysRemaining: daysRemaining,\n  4869\t              proratedAmount: proratedAmount,\n  4870\t              mainTransactionId: createdTransaction[0].id\n  4871\t            }\n  4872\t          });\n  4873\t        }\n...\nPath: client/src/pages/billing-page.tsx\n...\n   118\t\n   119\t\n   120\t\n   121\t  // Fetch balance data (both VirtFusion tokens and custom credits)\n   122\t  const { data: balanceData } = useQuery&lt;{\n   123\t    virtFusionCredits: number,\n   124\t    virtFusionTokens: number,\n   125\t    customCredits: number\n   126\t  }&gt;({\n   127\t    queryKey: [\&quot;/api/billing/balance\&quot;],\n   128\t  });\n   129\t\n   130\t  // Fetch VirtFusion usage data for last 30 days\n   131\t  const { data: usageData, isError: usageError, error: usageErrorData } = useQuery&lt;{ usage: number, rawData: any }&gt;({\n   132\t    queryKey: [\&quot;/api/billing/usage/last30days\&quot;],\n   133\t    staleTime: 300000, // 5 minutes\n   134\t  });\n   135\t\n   136\t  // Log usage data when it changes\n   137\t  React.useEffect(() =&gt; {\n   138\t    if (usageData) {\n   139\t      console.log(\&quot;VirtFusion usage data:\&quot;, usageData);\n   140\t    }\n   141\t    if (usageError) {\n   142\t      console.error(\&quot;VirtFusion usage API error:\&quot;, usageErrorData);\n   143\t    }\n   144\t  }, [usageData, usageError, usageErrorData]);\n...\n   250\t\n   251\t  // Calculate billing summary combining both VirtFusion and custom credit data\n   252\t  const hasVirtFusionBalance = balanceData?.virtFusionCredits &amp;&amp; balanceData.virtFusionCredits &gt; 0;\n   253\t\n   254\t  // Calculate the spent and added amounts for the last 30 days from transactions (includes both VirtFusion and custom credits)\n   255\t  const spentFromTransactions = transactions\n   256\t    .filter(t =&gt; isDebit(t) &amp;&amp; new Date(t.createdAt) &gt; new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))\n   257\t    .reduce((sum, t) =&gt; sum + Math.abs(t.amount), 0);\n   258\t\n   259\t  const addedFromTransactions = transactions\n   260\t    .filter(t =&gt; isCredit(t) &amp;&amp; new Date(t.createdAt) &gt; new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))\n   261\t    .reduce((sum, t) =&gt; sum + Math.abs(t.amount), 0);\n   262\t\n   263\t  const summaryData = {\n   264\t    // Use VirtFusion balance only - use nullish coalescing to preserve negative balances\n   265\t    balance: balanceData?.virtFusionCredits ?? 0,\n   266\t    virtFusionTokens: balanceData?.virtFusionTokens ?? 0,\n   267\t\n   268\t    // Combine VirtFusion API usage data with all transaction-based spending (VirtFusion + custom credits)\n   269\t    spent30Days: ((usageData &amp;&amp; 'usage' in usageData) ? usageData.usage : 0) + spentFromTransactions,\n   270\t    added30Days: addedFromTransactions,\n   271\t  };\n...\nPath: md-docs/dual-billing-system.md\n     1\t# Dual Billing System Implementation\n     2\t\n     3\t## Overview\n     4\t\n     5\tSkyPANEL now implements a comprehensive dual billing system that separates VirtFusion VPS services from other platform services. This system maintains the existing VirtFusion integration while adding a new custom credit system for DNS plans, dedicated servers, and future services.\n     6\t\n     7\t## System Architecture\n     8\t\n     9\t### VirtFusion Tokens\n    10\t- **Purpose**: Exclusively for VPS services\n    11\t- **Management**: Via VirtFusion API\n    12\t- **Storage**: External (VirtFusion infrastructure)\n    13\t- **Exchange Rate**: 100 tokens = $1.00 USD\n    14\t- **Payment**: PayPal integration\n...\n    37\t\n    38\t#### `dns_plans`\n    39\t- Pricing structure for DNS service tiers\n    40\t- Three default plans: Basic ($5), Pro ($15), Enterprise ($50)\n    41\t- Configurable features and limits\n    42\t\n    43\t#### `dns_plan_subscriptions`\n    44\t- User subscription management for DNS plans\n    45\t- Tracks subscription status, dates, and auto-renewal settings\n    46\t\n    47\t## API Endpoints\n    48\t\n    49\t### Enhanced Billing Endpoints\n    50\t\n    51\t#### `GET /api/billing/balance`\n    52\t- Returns both VirtFusion tokens AND custom credits\n    53\t- Unified balance response for frontend\n    54\t\n    55\t#### `POST /api/billing/custom-credits/add`\n    56\t- PayPal integration for custom credit purchases\n    57\t- Server-side payment verification\n    58\t- Amount validation ($1-$1000 range)\n    59\t- Transaction logging with audit trail\n...\nPath: .github/copilot/dual-billing-system.md\n     1\t# SkyPANEL Dual Billing System\n     2\t\n     3\t## Overview\n     4\tThe Dual Billing System in SkyPANEL provides a comprehensive financial infrastructure that separates VirtFusion VPS services from other platform services. It combines VirtFusion token management with a custom credit system, providing flexible payment options through PayPal integration.\n     5\t\n     6\t## Core Components\n     7\t\n     8\t### VirtFusion Token Management\n     9\t- **Purpose**: Exclusively for VPS services management\n    10\t- **Storage**: External (VirtFusion infrastructure)\n    11\t- **Exchange Rate**: 100 tokens = $1.00 USD\n    12\t- **API Integration**: Complete VirtFusion API integration for token purchases and management\n    13\t- **Transaction Tracking**: Synchronized with SkyPANEL transaction history\n...\n   132\t\n   133\t// Add custom credits\n   134\trouter.post('/api/billing/custom-credits/add', authMiddleware, async (req, res) =&gt; {\n   135\t  const { amount } = req.body;\n   136\t  \n   137\t  try {\n   138\t    // Validate amount\n   139\t    if (!amount || amount &lt; 1 || amount &gt; 1000) {\n   140\t      return res.status(400).json({ error: 'Invalid amount. Must be between $1 and $1000.' });\n   141\t    }\n   142\t    \n   143\t    // Create PayPal order\n   144\t    const order = await paypalService.createOrder(amount, 'Custom Credits Purchase');\n   145\t    \n   146\t    return res.json({ orderId: order.id });\n   147\t  } catch (error) {\n   148\t    console.error('Error creating order:', error);\n   149\t    return res.status(500).json({ error: 'Failed to create order' });\n   150\t  }\n   151\t});\n...\n   521\t    \n   522\t    // Create transaction record\n   523\t    await tx.insert(creditTransactionsTable).values({\n   524\t      userId,\n   525\t      amount,\n   526\t      type,\n   527\t      status: 'completed',\n   528\t      paymentMethod: paymentId ? 'paypal' : 'admin',\n   529\t      paymentId,\n   530\t      adminUserId: metadata?.adminUserId,\n   531\t      adminReason: metadata?.adminReason,\n   532\t      balanceBefore: currentBalance,\n   533\t      balanceAfter: newBalance,\n   534\t      metadata: metadata || null,\n   535\t      createdAt: new Date()\n   536\t    });\n   537\t  });\n   538\t}\n   539\t\n   540\t// Using custom credits for a service\n   541\texport async function useCustomCredits(\n   542\t  userId: number,\n   543\t  amount: number,\n   544\t  serviceType: string,\n   545\t  serviceId: string,\n   546\t  metadata?: Record&lt;string, any&gt;\n   547\t): Promise&lt;boolean&gt; {\n   548\t  let success = false;\n...\nPath: md-docs/dual-billing-implementation-status.md\n...\n    15\t\n    16\t### Backend API Implementation\n    17\t- ✅ **Enhanced Balance Endpoint**: `/api/billing/balance` now returns both VirtFusion tokens AND custom credits\n    18\t- ✅ **Custom Credits Purchase**: `/api/billing/custom-credits/add` with PayPal integration\n    19\t- ✅ **Transaction History**: `/api/billing/custom-credits/transactions` with pagination\n    20\t- ✅ **Admin Management**: Complete CRUD operations for admin credit management\n    21\t  - `GET /api/admin/users/:id/custom-credits` - View balance and transactions\n    22\t  - `POST /api/admin/users/:id/custom-credits` - Add credits with audit trail\n    23\t  - `DELETE /api/admin/users/:id/custom-credits` - Remove credits with confirmation\n...\nPath: client/src/components/billing/CustomCreditsPayPalCheckout.tsx\n...\n    10\t\n    11\texport function CustomCreditsPayPalCheckout({ amount }: CustomCreditsPayPalCheckoutProps) {\n    12\t  const [isProcessing, setIsProcessing] = useState(false);\n    13\t  const { toast } = useToast();\n    14\t  const queryClient = useQueryClient();\n    15\t  const [{ isPending }] = usePayPalScriptReducer();\n    16\t\n    17\t  // Fetch branding data for custom credits name\n    18\t  const { data: brandingData } = useQuery&lt;{\n    19\t    company_name: string;\n    20\t    custom_credits_name?: string;\n    21\t  }&gt;({\n    22\t    queryKey: ['/api/settings/branding'],\n    23\t  });\n    24\t\n    25\t  // Mutation for adding custom credits\n    26\t  const addCustomCreditsMutation = useMutation({\n    27\t    mutationFn: async (data: { amount: number; paymentId: string; verificationData: any }) =&gt; {\n    28\t      return await apiRequest(\&quot;/api/billing/custom-credits/add\&quot;, {\n    29\t        method: \&quot;POST\&quot;,\n    30\t        body: data\n    31\t      });\n    32\t    },\n...\nPath: md-docs/custom-credit-system.md\n...\n    14\t\n    15\t### Credit Operations\n    16\t- **Purchase**: Buy credits via PayPal integration\n    17\t- **Admin Management**: Administrative credit addition/removal\n    18\t- **Service Payments**: Use credits for DNS plans and other services\n    19\t- **Balance Tracking**: Real-time balance updates and history\n    20\t\n    21\t## Branding Configuration\n    22\t\n    23\t### Admin Settings\n    24\tCredits are configured in the admin panel:\n    25\t- **Path**: `/admin/settings` → Custom Credits tab\n    26\t- **Field**: `custom_credits_name`\n    27\t- **API**: `/api/settings/branding`\n    28\t- **Storage**: Database settings table\n    29\t\n    30\t### Branding Data Structure\n    31\t```javascript\n    32\tinterface BrandingData {\n    33\t  company_name: string;\n    34\t  primary_color: string;\n    35\t  secondary_color: string;\n    36\t  accent_color: string;\n    37\t  custom_credits_name?: string;\n    38\t  custom_credits_symbol?: string;\n    39\t}\n...\n   136\t```\n   137\t\n   138\t### PayPal Configuration\n   139\t```javascript\n   140\tconst paypalConfig = {\n   141\t  clientId: process.env.PAYPAL_CLIENT_ID,\n   142\t  clientSecret: process.env.PAYPAL_CLIENT_SECRET,\n   143\t  environment: process.env.NODE_ENV === 'production' ? 'live' : 'sandbox',\n   144\t  currency: 'USD'\n   145\t};\n...\n   231\t```\n   232\t\n   233\t### Purchase Interface\n   234\t```javascript\n   235\tconst CreditPurchase = ({ brandingData }) =&gt; {\n   236\t  const creditName = brandingData?.custom_credits_name || 'Custom Credits';\n   237\t  \n   238\t  return (\n   239\t    &lt;div className=\&quot;credit-purchase\&quot;&gt;\n   240\t      &lt;h2&gt;Purchase {creditName}&lt;/h2&gt;\n   241\t      &lt;p&gt;Add {creditName} to your account via PayPal&lt;/p&gt;\n   242\t      {/* PayPal integration components */}\n   243\t    &lt;/div&gt;\n   244\t  );\n   245\t};\n   246\t```\n   247\t\n   248\t## API Endpoints\n   249\t\n   250\t### Credit Management\n   251\t```javascript\n   252\t// Get user balance\n   253\tGET /api/billing/custom-credits/balance\n   254\t\n   255\t// Purchase credits\n   256\tPOST /api/billing/custom-credits/add\n   257\t{\n   258\t  amount: number,\n   259\t  paypalOrderId: string\n   260\t}\n   261\t\n   262\t// Admin add credits\n   263\tPOST /api/admin/users/:id/custom-credits/add\n   264\t{\n   265\t  amount: number,\n   266\t  reason: string\n   267\t}\n   268\t\n   269\t// Admin remove credits\n   270\tPOST /api/admin/users/:id/custom-credits/remove\n   271\t{\n   272\t  amount: number,\n   273\t  reason: string\n   274\t}\n   275\t\n   276\t// Get transaction history\n   277\tGET /api/billing/custom-credits/transactions\n   278\t```\n   279\t\n   280\t### Branding Integration\n   281\t```javascript\n   282\t// Get branding settings\n   283\tGET /api/settings/branding\n   284\t\n   285\t// Update branding settings (admin only)\n   286\tPUT /api/settings/branding\n   287\t{\n   288\t  custom_credits_name: string,\n   289\t  custom_credits_symbol?: string\n   290\t}\n...\nPath: server/routes/api-v1-routes.ts\n...\n    76\t\n    77\t/**\n    78\t * @route GET /api/v1/balance\n    79\t * @desc Get user's credit balance\n    80\t * @access Private (API Key with read:billing scope)\n    81\t */\n    82\trouter.get('/balance', requireScope('read:billing'), async (req: Request, res: Response) =&gt; {\n    83\t  try {\n    84\t    const userId = req.user?.id;\n    85\t\n    86\t    if (!userId) {\n    87\t      return res.status(401).json({ error: 'Unauthorized' });\n    88\t    }\n    89\t\n    90\t    // Fetch user's VirtFusion token balance\n    91\t    const [user] = await db\n    92\t      .select({\n    93\t        id: users.id,\n    94\t        virtFusionId: users.virtFusionId,\n    95\t      })\n    96\t      .from(users)\n    97\t      .where(eq(users.id, userId));\n    98\t\n    99\t    if (!user) {\n   100\t      return res.status(404).json({ error: 'User not found' });\n   101\t    }\n   102\t\n   103\t    // Initialize response with VirtFusion data only\n   104\t    const response = {\n   105\t      virtFusionCredits: 0,\n   106\t      virtFusionTokens: 0,\n   107\t      currency: 'USD'\n   108\t    };\n   109\t\n   110\t    // If user has VirtFusion account linked, fetch their tokens\n   111\t    if (user.virtFusionId) {\n   112\t      try {\n   113\t        const { VirtFusionApi } = await import('../virtfusion-api');\n   114\t        const virtFusionApi = new VirtFusionApi();\n   115\t        if (virtFusionApi.isConfigured()) {\n   116\t          // Use the VirtFusion API to get user hourly stats (which contains credit info)\n   117\t          const virtFusionData = await virtFusionApi.getUserHourlyStats(user.id);\n   118\t\n   119\t          if (virtFusionData?.data?.credit?.tokens) {\n   120\t            const tokenAmount = parseFloat(virtFusionData.data.credit.tokens);\n   121\t            const dollarAmount = tokenAmount / 100; // 100 tokens = $1.00 USD\n   122\t\n   123\t            response.virtFusionTokens = tokenAmount || 0;\n   124\t            response.virtFusionCredits = dollarAmount || 0;\n   125\t          }\n   126\t        }\n...\nPath: .github/copilot/custom-credit-system.md\n     1\t# SkyPANEL Custom Credit System\n     2\t\n     3\t## Overview\n     4\tThe Custom Credit System is a comprehensive virtual currency solution that allows administrators to configure branded credits (e.g., \&quot;Sky Credits\&quot;, \&quot;Platform Credits\&quot;) for purchasing services, with full transaction management, admin controls, and PayPal integration.\n     5\t\n     6\t## Core Components\n     7\t\n     8\t### Credit Configuration\n     9\t- Dynamic branding with administrator-configurable credit names\n    10\t- Branded display consistent throughout the UI\n    11\t- Fallback handling to \&quot;Custom Credits\&quot; when not configured\n    12\t- Real-time updates when branding changes\n    13\t\n    14\t### Credit Operations\n    15\t- Purchase credits via PayPal integration\n    16\t- Administrative credit addition/removal\n    17\t- Use credits for DNS plans and other services\n    18\t- Real-time balance tracking and history\n...\nPath: server/routes/api-only-routes.ts\n...\n    66\t\n    67\t// Balance endpoint - requires API key with 'read:billing' scope\n    68\trouter.get('/balance',\n    69\t  apiKeyAuth,\n    70\t  requireScope('read:billing'),\n    71\t  async (req, res) =&gt; {\n    72\t    try {\n    73\t      const { userId } = (req as any).apiKeyUser;\n    74\t\n    75\t      // Get user for VirtFusion token balance\n    76\t      const user = await storage.getUser(userId);\n    77\t      if (!user) {\n    78\t        return res.status(404).json({\n    79\t          error: 'Not Found',\n    80\t          message: 'User not found'\n    81\t        });\n    82\t      }\n    83\t\n    84\t      // Initialize response with VirtFusion data only\n    85\t      const response = {\n    86\t        virtFusionCredits: 0,\n    87\t        virtFusionTokens: 0,\n    88\t        currency: 'USD'\n    89\t      };\n    90\t\n    91\t      // If user has VirtFusion account linked, fetch their tokens\n    92\t      if (user.virtFusionId) {\n    93\t        try {\n    94\t          const { VirtFusionApi } = await import('../virtfusion-api');\n    95\t          const virtFusionApi = new VirtFusionApi();\n    96\t          if (virtFusionApi.isConfigured()) {\n    97\t            // Use the VirtFusion API to get user hourly stats (which contains credit info)\n    98\t            const virtFusionData = await virtFusionApi.getUserHourl...&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01CYhHjMugmBkUM7uUzdiWkf&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;,&quot;folderRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-09T14:39:22.213Z&quot;,&quot;response_text&quot;:&quot;Now let me look for more specific information about the database schema and transaction handling to understand the complete billing structure.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;bf731548-ea63-4a48-a675-8af47e98dc50&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_vrtx_01SuqK9cw5mWBVGmQSAC8ZKR&quot;,&quot;tool_name&quot;:&quot;codebase-retrieval&quot;,&quot;input_json&quot;:&quot;{\&quot;information_request\&quot;: \&quot;VirtFusion token conversion rate, 100 tokens equals 1 dollar, VirtFusion hourly deductions, VirtFusion daily billing, VirtFusion API token management, token to dollar conversion, VirtFusion billing frequency\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me look for any specific information about VirtFusion token conversion rates and daily/hourly deduction logic.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;The following code sections were retrieved:\nPath: shared/schema.ts\n...\n    87\t\n    88\texport type InsertSession = z.infer&lt;typeof insertSessionSchema&gt;;\n    89\texport type Session = typeof sessions.$inferSelect;\n    90\t\n    91\t// Transactions\n    92\texport const transactions = pgTable(\&quot;transactions\&quot;, {\n    93\t  id: serial(\&quot;id\&quot;).primaryKey(),\n    94\t  userId: integer(\&quot;user_id\&quot;).notNull().references(() =&gt; users.id, { onDelete: 'cascade' }),\n    95\t  amount: real(\&quot;amount\&quot;).notNull(),\n    96\t  type: text(\&quot;type\&quot;).notNull(), // credit, debit\n    97\t  description: text(\&quot;description\&quot;).notNull(),\n    98\t  status: text(\&quot;status\&quot;).notNull().default(\&quot;pending\&quot;), // pending, completed, failed\n    99\t  paymentMethod: text(\&quot;payment_method\&quot;),\n   100\t  paymentId: text(\&quot;payment_id\&quot;),\n   101\t  virtFusionCreditId: text(\&quot;virtfusion_credit_id\&quot;), // VirtFusion credit ID for tracking\n   102\t  createdAt: timestamp(\&quot;created_at\&quot;).defaultNow(),\n   103\t});\n   104\t\n   105\texport const insertTransactionSchema = createInsertSchema(transactions).omit({\n   106\t  id: true,\n   107\t  createdAt: true,\n   108\t});\n   109\t\n   110\texport type InsertTransaction = z.infer&lt;typeof insertTransactionSchema&gt;;\n   111\texport type Transaction = typeof transactions.$inferSelect;\n   112\t\n   113\t// User Credits (Custom Credits System - separate from VirtFusion)\n   114\texport const userCredits = pgTable(\&quot;user_credits\&quot;, {\n   115\t  id: serial(\&quot;id\&quot;).primaryKey(),\n   116\t  userId: integer(\&quot;userId\&quot;).notNull().references(() =&gt; users.id, { onDelete: 'cascade' }).unique(),\n   117\t  balance: real(\&quot;balance\&quot;).notNull().default(0), // Balance in USD\n   118\t  createdAt: timestamp(\&quot;createdAt\&quot;).defaultNow(),\n   119\t  updatedAt: timestamp(\&quot;updatedAt\&quot;).defaultNow(),\n   120\t});\n   121\t\n   122\texport const insertUserCreditsSchema = createInsertSchema(userCredits).omit({\n   123\t  id: true,\n   124\t  createdAt: true,\n   125\t  updatedAt: true,\n   126\t});\n   127\t\n   128\texport type InsertUserCredits = z.infer&lt;typeof insertUserCreditsSchema&gt;;\n   129\texport type UserCredits = typeof userCredits.$inferSelect;\n   130\t\n   131\t// Credit Transactions (Audit trail for custom credit operations)\n   132\texport const creditTransactions = pgTable(\&quot;credit_transactions\&quot;, {\n   133\t  id: serial(\&quot;id\&quot;).primaryKey(),\n   134\t  userId: integer(\&quot;userId\&quot;).notNull().references(() =&gt; users.id, { onDelete: 'cascade' }),\n   135\t  amount: real(\&quot;amount\&quot;).notNull(), // Positive for credits, negative for debits\n   136\t  type: text(\&quot;type\&quot;).notNull(), // 'purchase', 'admin_add', 'admin_remove', 'dns_plan_purchase', 'refund'\n   137\t  description: text(\&quot;description\&quot;).notNull(),\n   138\t  status: text(\&quot;status\&quot;).notNull().default(\&quot;completed\&quot;), // 'pending', 'completed', 'failed'\n   139\t  paymentMethod: text(\&quot;paymentMethod\&quot;), // 'paypal', 'admin', etc.\n   140\t  paymentId: text(\&quot;paymentId\&quot;), // PayPal payment ID or admin reference\n   141\t  adminUserId: integer(\&quot;adminUserId\&quot;).references(() =&gt; users.id, { onDelete: 'set null' }), // Admin who performed the action\n   142\t  adminReason: text(\&quot;adminReason\&quot;), // Reason provided by admin\n   143\t  balanceBefore: real(\&quot;balanceBefore\&quot;).notNull(), // Balance before transaction\n   144\t  balanceAfter: real(\&quot;balanceAfter\&quot;).notNull(), // Balance after transaction\n   145\t  metadata: json(\&quot;metadata\&quot;).default({}), // Additional transaction data\n   146\t  createdAt: timestamp(\&quot;createdAt\&quot;).defaultNow(),\n   147\t});\n   148\t\n   149\texport const insertCreditTransactionSchema = createInsertSchema(creditTransactions).omit({\n   150\t  id: true,\n   151\t  createdAt: true,\n   152\t});\n   153\t\n   154\texport type InsertCreditTransaction = z.infer&lt;typeof insertCreditTransactionSchema&gt;;\n   155\texport type CreditTransaction = typeof creditTransactions.$inferSelect;\n   156\t\n   157\t// DNS Plans (Pricing structure for DNS service tiers)\n   158\texport const dnsPlans = pgTable(\&quot;dns_plans\&quot;, {\n   159\t  id: serial(\&quot;id\&quot;).primaryKey(),\n   160\t  name: text(\&quot;name\&quot;).notNull(), // 'Basic', 'Pro', 'Enterprise'\n   161\t  description: text(\&quot;description\&quot;).notNull(),\n   162\t  price: real(\&quot;price\&quot;).notNull(), // Monthly price in USD\n   163\t  maxDomains: integer(\&quot;maxDomains\&quot;).notNull(), // Maximum domains allowed\n   164\t  maxRecords: integer(\&quot;maxRecords\&quot;).notNull(), // Maximum DNS records per domain\n   165\t  features: json(\&quot;features\&quot;).default([]), // Array of feature strings\n   166\t  isActive: boolean(\&quot;isActive\&quot;).default(true).notNull(),\n   167\t  displayOrder: integer(\&quot;displayOrder\&quot;).default(0),\n   168\t  createdAt: timestamp(\&quot;createdAt\&quot;).defaultNow(),\n   169\t  updatedAt: timestamp(\&quot;updatedAt\&quot;).defaultNow(),\n   170\t});\n...\n   180\t\n   181\t// DNS Plan Subscriptions (User subscription management)\n   182\texport const dnsPlanSubscriptions = pgTable(\&quot;dns_plan_subscriptions\&quot;, {\n   183\t  id: serial(\&quot;id\&quot;).primaryKey(),\n   184\t  userId: integer(\&quot;userId\&quot;).notNull().references(() =&gt; users.id, { onDelete: 'cascade' }),\n   185\t  planId: integer(\&quot;planId\&quot;).notNull().references(() =&gt; dnsPlans.id, { onDelete: 'cascade' }),\n   186\t  status: text(\&quot;status\&quot;).notNull().default(\&quot;active\&quot;), // 'active', 'cancelled', 'expired'\n   187\t  startDate: timestamp(\&quot;startDate\&quot;).notNull(),\n   188\t  endDate: timestamp(\&quot;endDate\&quot;).notNull(),\n   189\t  autoRenew: boolean(\&quot;autoRenew\&quot;).default(true).notNull(),\n   190\t  lastPaymentDate: timestamp(\&quot;lastPaymentDate\&quot;),\n   191\t  nextPaymentDate: timestamp(\&quot;nextPaymentDate\&quot;),\n   192\t  createdAt: timestamp(\&quot;createdAt\&quot;).defaultNow(),\n   193\t  updatedAt: timestamp(\&quot;updatedAt\&quot;).defaultNow(),\n   194\t});\n...\nPath: .github/copilot/dual-billing-system.md\n...\n    29\t\n    30\t```typescript\n    31\t// User Credits (Custom Credits System)\n    32\texport const userCreditsTable = pgTable('user_credits', {\n    33\t  id: serial('id').primaryKey().notNull(),\n    34\t  userId: integer('user_id').notNull().references(() =&gt; usersTable.id, { onDelete: 'cascade' }).unique(),\n    35\t  balance: real('balance').default(0).notNull(),\n    36\t  createdAt: timestamp('created_at').defaultNow(),\n    37\t  updatedAt: timestamp('updated_at').defaultNow()\n    38\t});\n    39\t\n    40\t// Credit Transactions (Audit Trail)\n    41\texport const creditTransactionsTable = pgTable('credit_transactions', {\n    42\t  id: serial('id').primaryKey().notNull(),\n    43\t  userId: integer('user_id').notNull().references(() =&gt; usersTable.id, { onDelete: 'cascade' }),\n    44\t  amount: real('amount').notNull(),\n    45\t  type: text('type').notNull(), // purchase, admin_add, admin_remove, service_purchase, etc.\n    46\t  description: text('description'),\n    47\t  status: text('status').notNull().default('completed'),\n    48\t  paymentMethod: text('payment_method'),\n    49\t  paymentId: text('payment_id'),\n    50\t  adminUserId: integer('admin_user_id').references(() =&gt; usersTable.id),\n    51\t  adminReason: text('admin_reason'),\n    52\t  balanceBefore: real('balance_before').notNull(),\n    53\t  balanceAfter: real('balance_after').notNull(),\n    54\t  metadata: jsonb('metadata'),\n    55\t  createdAt: timestamp('created_at').defaultNow().notNull()\n    56\t});\n    57\t\n    58\t// Integrated with existing transactions table for VirtFusion tokens\n    59\texport const transactionsTable = pgTable('transactions', {\n    60\t  id: uuid('id').primaryKey().defaultRandom(),\n    61\t  userId: uuid('user_id').notNull().references(() =&gt; usersTable.id),\n    62\t  amount: decimal('amount', { precision: 10, scale: 2 }).notNull(),\n    63\t  creditAmount: integer('credit_amount'),\n    64\t  type: text('type').notNull(),\n    65\t  status: text('status').notNull(),\n    66\t  description: text('description'),\n    67\t  metadata: jsonb('metadata'),\n    68\t  createdAt: timestamp('created_at').defaultNow().notNull(),\n    69\t  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n    70\t  paypalOrderId: text('paypal_order_id'),\n    71\t  virtFusionCreditId: text('virtfusion_credit_id')\n    72\t});\n    73\t\n    74\t// DNS Plans pricing (uses Custom Credits)\n    75\texport const dnsPlansTable = pgTable('dns_plans', {\n    76\t  id: serial('id').primaryKey().notNull(),\n    77\t  name: text('name').notNull(),\n    78\t  description: text('description'),\n    79\t  price: real('price').notNull(),\n    80\t  domainLimit: integer('domain_limit').notNull(),\n    81\t  recordLimit: integer('record_limit').notNull(),\n    82\t  isActive: boolean('is_active').default(true).notNull(),\n    83\t  createdAt: timestamp('created_at').defaultNow().notNull(),\n    84\t  updatedAt: timestamp('updated_at').defaultNow().notNull()\n    85\t});\n...\n   484\t\n   485\t```typescript\n   486\t// Adding custom credits (server-side)\n   487\texport async function addCustomCredits(\n   488\t  userId: number,\n   489\t  amount: number,\n   490\t  type: string,\n   491\t  paymentId?: string | null,\n   492\t  metadata?: Record&lt;string, any&gt;\n   493\t): Promise&lt;void&gt; {\n   494\t  // Use transaction to ensure data integrity\n   495\t  await db.transaction(async (tx) =&gt; {\n   496\t    // Get current balance\n   497\t    const userCredit = await tx.query.userCreditsTable.findFirst({\n   498\t      where: eq(userCreditsTable.userId, userId)\n   499\t    });\n   500\t    \n   501\t    const currentBalance = userCredit?.balance || 0;\n   502\t    const newBalance = currentBalance + amount;\n   503\t    \n   504\t    // Create or update user balance\n   505\t    if (userCredit) {\n   506\t      await tx\n   507\t        .update(userCreditsTable)\n   508\t        .set({\n   509\t          balance: newBalance,\n   510\t          updatedAt: new Date()\n   511\t        })\n   512\t        .where(eq(userCreditsTable.userId, userId));\n   513\t    } else {\n   514\t      await tx.insert(userCreditsTable).values({\n   515\t        userId,\n   516\t        balance: amount,\n   517\t        createdAt: new Date(),\n   518\t        updatedAt: new Date()\n   519\t      });\n   520\t    }\n...\nPath: .github/copilot/custom-credit-system.md\n...\n    19\t\n    20\t## Database Schema\n    21\t\n    22\t```typescript\n    23\t// Credit transaction table\n    24\texport const transactionsTable = pgTable('transactions', {\n    25\t  id: uuid('id').primaryKey().defaultRandom(),\n    26\t  userId: uuid('user_id').notNull().references(() =&gt; usersTable.id),\n    27\t  amount: decimal('amount', { precision: 10, scale: 2 }).notNull(),\n    28\t  creditAmount: integer('credit_amount'),\n    29\t  type: text('type').notNull(),\n    30\t  status: text('status').notNull(),\n    31\t  description: text('description'),\n    32\t  metadata: jsonb('metadata'),\n    33\t  createdAt: timestamp('created_at').defaultNow().notNull(),\n    34\t  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n    35\t  paypalOrderId: text('paypal_order_id'),\n    36\t  virtFusionCreditId: text('virtfusion_credit_id')\n    37\t});\n...\nPath: md-docs/dual-billing-implementation-status.md\n     1\t# Dual Billing System - Implementation Status\n     2\t\n     3\t## ✅ Completed Implementation\n     4\t\n     5\t### Database Schema &amp; Migration\n     6\t- ✅ **Database Tables Created**: All 4 new tables successfully created\n     7\t  - `user_credits`: Custom credit balances (separate from VirtFusion)\n     8\t  - `credit_transactions`: Complete audit trail for custom credit operations\n     9\t  - `dns_plans`: DNS service pricing tiers (Basic: $5, Pro: $15, Enterprise: $50)\n    10\t  - `dns_plan_subscriptions`: User DNS plan subscription management\n    11\t\n    12\t- ✅ **Schema Validation**: All tables accessible with proper foreign key constraints\n    13\t- ✅ **Migration Scripts**: Working migration and fix scripts available\n    14\t- ✅ **Test Suite**: Comprehensive test script validates all functionality\n...\nPath: md-docs/database-schema.md\n...\n   201\t\n   202\t### Billing Relationships\n   203\t- One-to-Many: Invoice → Transactions\n   204\t- Many-to-One: Invoice → User\n   205\t- Many-to-One: Transaction → User\n   206\t- Many-to-One: Transaction → Invoice (optional)\n   207\t\n   208\t### Support Relationships\n   209\t- One-to-Many: Ticket → TicketMessages\n   210\t- Many-to-One: Ticket → User (creator)\n   211\t- Many-to-One: Ticket → User (assigned_to)\n   212\t\n   213\t## Indexes\n   214\t\n   215\t### Users Table\n   216\t- Primary Key: id\n   217\t- Unique: email\n   218\t- Unique: username\n   219\t- Index: status\n   220\t- Index: created_at\n   221\t\n   222\t### Sessions Table\n   223\t- Primary Key: id\n   224\t- Index: user_id\n   225\t- Index: token (unique)\n   226\t- Index: expires_at\n   227\t\n   228\t### Servers Table\n   229\t- Primary Key: id\n   230\t- Index: user_id\n   231\t- Index: status\n   232\t- Index: node_id\n   233\t- Index: package_id\n   234\t\n   235\t### Invoices Table\n   236\t- Primary Key: id\n   237\t- Index: user_id\n   238\t- Index: status\n   239\t- Index: due_date\n...\nPath: md-docs/billing-system.md\n     1\t# Billing System\n     2\t\n     3\t## Overview\n     4\tThe Billing System in SkyPANEL manages all financial transactions, subscriptions, and invoicing for the platform. It integrates with payment gateways, tracks usage, and handles billing cycles for both customers and administrators.\n     5\t\n     6\t## Table of Contents\n     7\t- [Features](#features)\n     8\t- [Architecture](#architecture)\n     9\t- [Pricing Models](#pricing-models)\n    10\t- [Payment Gateways](#payment-gateways)\n    11\t- [Subscription Management](#subscription-management)\n    12\t- [Invoicing](#invoicing)\n    13\t- [Usage Tracking](#usage-tracking)\n    14\t- [Tax Handling](#tax-handling)\n    15\t- [Reporting](#reporting)\n    16\t- [Security](#security)\n    17\t- [Error Handling](#error-handling)\n    18\t- [Configuration](#configuration)\n    19\t\n    20\t## Features\n...\n    33\t\n    34\t### Components\n    35\t- **BillingService**: Core billing logic\n    36\t- **PaymentProcessor**: Handles payment gateway integration\n    37\t- **InvoiceGenerator**: Creates and manages invoices\n    38\t- **UsageTracker**: Tracks resource usage for billing\n    39\t- **TaxCalculator**: Handles tax calculations\n    40\t- **NotificationService**: Sends billing-related notifications\n    41\t\n    42\t### Data Flow\n    43\t1. Subscription created/updated\n    44\t2. Usage data collected\n    45\t3. Billing cycle ends\n    46\t4. Invoice generated\n    47\t5. Payment processed\n    48\t6. Receipt sent\n    49\t7. Records updated\n    50\t\n    51\t## Pricing Models\n    52\t\n    53\t### Subscription Plans\n    54\t1. **Fixed Price**\n    55\t   - Monthly/Annual billing\n    56\t   - Feature-based tiers\n    57\t   - Flat rate per period\n    58\t\n    59\t2. **Usage-Based**\n    60\t   - Pay-per-use pricing\n    61\t   - Tiered pricing\n    62\t   - Overage charges\n...\n   103\t```\n   104\t\n   105\t## Subscription Management\n   106\t\n   107\t### Subscription Lifecycle\n   108\t1. **Trial**\n   109\t   - No payment required\n   110\t   - Limited features/duration\n   111\t   - Converts to paid on completion\n   112\t\n   113\t2. **Active**\n   114\t   - Regular billing cycles\n   115\t   - Full feature access\n   116\t   - Usage tracking active\n   117\t\n   118\t3. **Past Due**\n   119\t   - Payment failed\n   120\t   - Grace period active\n   121\t   - Limited functionality\n   122\t\n   123\t4. **Canceled**\n   124\t   - End of billing period\n   125\t   - Data retention period\n   126\t   - Can be reactivated\n   127\t\n   128\t### Webhook Events\n   129\t- `subscription.created`\n   130\t- `subscription.updated`\n   131\t- `subscription.canceled`\n   132\t- `subscription.renewed`\n   133\t- `subscription.payment_failed`\n   134\t\n   135\t## Invoicing\n   136\t\n   137\t### Invoice Generation\n   138\t1. **Automatic**\n   139\t   - End of billing cycle\n   140\t   - Usage-based charges\n   141\t   - Recurring subscriptions\n   142\t\n   143\t2. **Manual**\n   144\t   - One-time charges\n   145\t   - Adjustments\n   146\t   - Pro-rated charges\n   147\t\n   148\t### Invoice Components\n   149\t- Header (logo, details)\n   150\t- Billing/Shipping info\n   151\t- Line items with descriptions\n   152\t- Subtotals and totals\n   153\t- Tax breakdown\n   154\t- Payment instructions\n   155\t- Due date\n   156\t\n   157\t## Usage Tracking\n   158\t\n   159\t### Tracked Resources\n   160\t- Compute hours\n   161\t- Storage usage\n   162\t- Bandwidth\n   163\t- API requests\n   164\t- Support tickets\n   165\t- Additional services\n   166\t\n   167\t### Usage Collection\n   168\t1. **Real-time**\n   169\t   - API calls\n   170\t   - Resource provisioning\n   171\t   - Active sessions\n   172\t\n   173\t2. **Batch**\n   174\t   - Hourly/daily aggregation\n   175\t   - System metrics\n   176\t   - Log analysis\n...\n   263\t\n   264\t### Database Tables\n   265\t1. `subscriptions`\n   266\t2. `invoices`\n   267\t3. `payments`\n   268\t4. `payment_methods`\n   269\t5. `credits`\n   270\t6. `usage_records`\n   271\t7. `tax_rates`\n   272\t\n   273\t## Best Practices\n   274\t\n   275\t### Implementation\n   276\t- Idempotent operations\n   277\t- Webhook idempotency keys\n   278\t- Comprehensive logging\n   279\t- Audit trails\n   280\t\n   281\t### Operations\n   282\t- Regular reconciliation\n   283\t- Backup payment methods\n   284\t- Dunning management\n   285\t- Tax compliance\n   286\t\n   287\t## Troubleshooting\n   288\t\n   289\t### Common Issues\n   290\t1. **Payment Failures**\n   291\t   - Check card details\n   292\t   - Verify address\n   293\t   - Contact payment provider\n   294\t   - Review fraud filters\n   295\t\n   296\t2. **Webhook Issues**\n   297\t   - Verify endpoint URL\n   298\t   - Check signature verification\n   299\t   - Review logs\n   300\t   - Test with webhook debugger\n   301\t\n   302\t3. **Tax Calculation**\n   303\t   - Verify address validation\n   304\t   - Check tax nexus settings\n   305\t   - Review tax certificates\n   306\t   - Validate tax IDs\n...\nPath: md-docs/transaction-type-system.md\n     1\t# Transaction Type System\n     2\t\n     3\t## Overview\n     4\t\n     5\tThis document describes the comprehensive transaction type system implemented in SkyPANEL, covering all transaction types, their classifications, display formatting, and branding integration.\n     6\t\n     7\t## Transaction Types\n     8\t\n     9\t### Core Transaction Types\n    10\t\n    11\t#### VirtFusion Transactions\n    12\t- **`virtfusion_credit`** - VirtFusion token purchases\n    13\t- **`virtfusion_credit_removal`** - VirtFusion token removals\n    14\t- **`virtfusion_deduction`** - VirtFusion token usage/deductions\n    15\t- **`credit`** - Legacy VirtFusion credit transactions\n    16\t\n    17\t#### Custom Credit Transactions\n    18\t- **`custom_credit`** - Custom credit purchases via PayPal\n    19\t- **`admin_credit_add`** - Administrative credit additions\n    20\t- **`admin_credit_remove`** - Administrative credit removals\n...\nPath: server/routes_new.ts\n...\n  5347\t\n  5348\t      try {\n  5349\t        // Start transaction to ensure data consistency\n  5350\t        await db.transaction(async (tx) =&gt; {\n  5351\t          // Update user credits balance\n  5352\t          await tx.update(userCreditsTable)\n  5353\t            .set({\n  5354\t              balance: newBalance,\n  5355\t              updatedAt: new Date()\n  5356\t            })\n  5357\t            .where(eq(userCreditsTable.userId, userId));\n  5358\t\n  5359\t          // Create credit transaction record (for audit trail)\n  5360\t          await tx.insert(creditTransactionsTable).values({\n  5361\t            userId: userId,\n  5362\t            amount: amount,\n  5363\t            type: 'purchase',\n  5364\t            description: `${customCreditsName} purchase via PayPal`,\n  5365\t            status: 'completed',\n  5366\t            paymentMethod: 'paypal',\n  5367\t            paymentId: paymentId,\n  5368\t            balanceBefore: currentBalance,\n  5369\t            balanceAfter: newBalance,\n  5370\t            metadata: {\n  5371\t              verificationData,\n  5372\t              mainTransactionId: createdTransaction.id // Link to main transaction\n  5373\t            }\n  5374\t          });\n  5375\t        });\n...\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_019xkjLb6espb2uimqsbVZGv&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;,&quot;folderRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-09T14:39:32.686Z&quot;,&quot;response_text&quot;:&quot;Now let me look for any specific information about VirtFusion token conversion rates and daily/hourly deduction logic.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;2410a9f0-57f8-45b5-bd9f-fb5e7eacd7b3&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Based on my analysis of the SkyPANEL codebase, I can now provide you with a comprehensive explanation of the billing system implementation. Let me break this down systematically:\n\n## 1. How Billing Cycles and Deductions Are Currently Handled\n\nThe SkyPANEL system implements a **dual billing system** with two separate credit systems:\n\n### VirtFusion Tokens (for VPS services)\n- **Managed externally** through VirtFusion API\n- **Hourly deductions** handled by VirtFusion infrastructure\n- **Real-time usage tracking** via VirtFusion API calls\n\n### Custom Credits (for DNS plans and other services)\n- **Monthly billing cycles** that align with calendar months\n- **Billing cycles start on the 1st of each month** (not user creation date)\n- **Prorated billing** for mid-month changes\n\n&lt;augment_code_snippet path=\&quot;server/routes_new.ts\&quot; mode=\&quot;EXCERPT\&quot;&gt;\n```typescript\n// Calculate billing cycle end date - always end on the last day of the current month\n// This ensures monthly billing cycles align with calendar months starting on the 1st\nconst endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // Last day of current month\nconst nextPaymentDate = new Date(endDate.getTime() - 3 * 24 * 60 * 60 * 1000); // 3 days before expiry\n```\n&lt;/augment_code_snippet&gt;\n\n## 2. USD Pricing and Custom Credits Conversion Rate\n\n**There is a 1:1 conversion rate between USD and custom credits.**\n\nThe system stores custom credit balances directly in USD:\n\n&lt;augment_code_snippet path=\&quot;shared/schema.ts\&quot; mode=\&quot;EXCERPT\&quot;&gt;\n```typescript\n// User Credits (Custom Credits System - separate from VirtFusion)\nexport const userCredits = pgTable(\&quot;user_credits\&quot;, {\n  id: serial(\&quot;id\&quot;).primaryKey(),\n  userId: integer(\&quot;userId\&quot;).notNull().references(() =&gt; users.id, { onDelete: 'cascade' }).unique(),\n  balance: real(\&quot;balance\&quot;).notNull().default(0), // Balance in USD\n  createdAt: timestamp(\&quot;createdAt\&quot;).defaultNow(),\n  updatedAt: timestamp(\&quot;updatedAt\&quot;).defaultNow(),\n});\n```\n&lt;/augment_code_snippet&gt;\n\n**VirtFusion tokens have a different conversion rate:**\n- **100 tokens = $1.00 USD**\n\n&lt;augment_code_snippet path=\&quot;server/routes_new.ts\&quot; mode=\&quot;EXCERPT\&quot;&gt;\n```typescript\nconst tokenAmount = parseFloat(virtFusionData.data.credit.tokens);\nconst dollarAmount = tokenAmount / 100; // 100 tokens = $1.00 USD\n```\n&lt;/augment_code_snippet&gt;\n\n## 3. Daily Deduction Calculation for $5/month Plan\n\nFor a **$5/month DNS plan with 30-day billing cycles**:\n\n**Daily deduction amount = $5.00 ÷ 30 days = $0.167 per day (16.7 cents)**\n\nHowever, the current implementation shows that **DNS plans are billed monthly upfront**, not daily. The prorated calculation is used for plan changes:\n\n&lt;augment_code_snippet path=\&quot;server/routes_new.ts\&quot; mode=\&quot;EXCERPT\&quot;&gt;\n```typescript\nconst daysRemaining = Math.max(0, Math.ceil((billingCycleEndDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));\nconst proratedAmount = (newPlan.price - currentPlan.price) * (daysRemaining / 30);\n```\n&lt;/augment_code_snippet&gt;\n\n## 4. Files Containing Billing Logic\n\n### Core Billing Files:\n- **`server/routes_new.ts`** - Main billing endpoints and logic\n- **`shared/schema.ts`** - Database schema for billing tables\n- **`server/virtfusion-api.ts`** - VirtFusion token management\n- **`client/src/pages/billing-page.tsx`** - Frontend billing interface\n\n### Database Tables:\n- **`user_credits`** - Custom credit balances\n- **`credit_transactions`** - Audit trail for custom credits\n- **`transactions`** - Main transaction history\n- **`dns_plans`** - DNS service pricing ($5, $15, $50)\n- **`dns_plan_subscriptions`** - User subscription management\n\n## 5. Daily/Hourly Deduction Calculations\n\n### VirtFusion (Hourly Deductions)\nVirtFusion handles hourly deductions automatically through their API. SkyPANEL tracks usage but doesn't calculate deductions:\n\n&lt;augment_code_snippet path=\&quot;client/src/pages/billing-page.tsx\&quot; mode=\&quot;EXCERPT\&quot;&gt;\n```typescript\n// Fetch VirtFusion usage data for last 30 days\nconst { data: usageData, isError: usageError, error: usageErrorData } = useQuery&lt;{ usage: number, rawData: any }&gt;({\n  queryKey: [\&quot;/api/billing/usage/last30days\&quot;],\n  staleTime: 300000, // 5 minutes\n});\n```\n&lt;/augment_code_snippet&gt;\n\n### Custom Credits (Monthly Billing)\nCustom credits are deducted monthly upfront when purchasing DNS plans:\n\n&lt;augment_code_snippet path=\&quot;server/routes_new.ts\&quot; mode=\&quot;EXCERPT\&quot;&gt;\n```typescript\nconst newBalance = currentBalance - plan.price;\n// Create credit transaction record (audit trail)\nawait tx.insert(creditTransactionsTable).values({\n  userId: userId,\n  amount: -plan.price, // Negative for debit\n  type: 'dns_plan_purchase',\n  description: `DNS Plan Purchase: ${plan.name} using ${customCreditsName}`,\n  status: 'completed',\n  paymentMethod: customCreditsName.toLowerCase().replace(/\\s+/g, '_'),\n  balanceBefore: currentBalance,\n  balanceAfter: newBalance,\n});\n```\n&lt;/augment_code_snippet&gt;\n\n## 6. Billing Proration and Cycle Management\n\n### Prorated Billing\nThe system **does implement prorated billing** for plan changes:\n\n&lt;augment_code_snippet path=\&quot;server/routes_new.ts\&quot; mode=\&quot;EXCERPT\&quot;&gt;\n```typescript\n// Calculate prorated amount based on proper monthly billing cycle\nconst now = new Date();\nlet billingCycleEndDate;\n\nif (currentSubscription.endDate.getFullYear() &gt; 2050) {\n  // This is a Free plan with far-future endDate, calculate proper monthly cycle\n  billingCycleEndDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // End of current month\n} else {\n  // This is a paid plan with proper billing cycle\n  billingCycleEndDate = new Date(currentSubscription.endDate);\n}\n\nconst daysRemaining = Math.max(0, Math.ceil((billingCycleEndDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));\nconst proratedAmount = (newPlan.price - currentPlan.price) * (daysRemaining / 30);\n```\n&lt;/augment_code_snippet&gt;\n\n### Billing Cycle Start Dates\n**Billing cycles start on the 1st of each month**, not on user creation date. This ensures consistent monthly billing across all users.\n\n### Special Custom Credit Handling\nCustom credits have comprehensive transaction tracking with audit trails, admin management capabilities, and PayPal integration for purchases. The system maintains separate balances for VirtFusion tokens and custom credits, providing flexibility for different service types.\n\nThe implementation shows a sophisticated dual billing system that separates VPS services (hourly VirtFusion billing) from platform services (monthly custom credit billing), with proper prorated calculations and comprehensive transaction tracking.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;Based on my analysis of the SkyPANEL codebase, I can now provide you with a comprehensive explanation of the billing system implementation. Let me break this down systematically:\n\n## 1. How Billing Cycles and Deductions Are Currently Handled\n\nThe SkyPANEL system implements a **dual billing system** with two separate credit systems:\n\n### VirtFusion Tokens (for VPS services)\n- **Managed externally** through VirtFusion API\n- **Hourly deductions** handled by VirtFusion infrastructure\n- **Real-time usage tracking** via VirtFusion API calls\n\n### Custom Credits (for DNS plans and other services)\n- **Monthly billing cycles** that align with calendar months\n- **Billing cycles start on the 1st of each month** (not user creation date)\n- **Prorated billing** for mid-month changes\n\n````typescript path=server/routes_new.ts mode=EXCERPT\n// Calculate billing cycle end date - always end on the last day of the current month\n// This ensures monthly billing cycles align with calendar months starting on the 1st\nconst endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // Last day of current month\nconst nextPaymentDate = new Date(endDate.getTime() - 3 * 24 * 60 * 60 * 1000); // 3 days before expiry\n````\n\n## 2. USD Pricing and Custom Credits Conversion Rate\n\n**There is a 1:1 conversion rate between USD and custom credits.**\n\nThe system stores custom credit balances directly in USD:\n\n````typescript path=shared/schema.ts mode=EXCERPT\n// User Credits (Custom Credits System - separate from VirtFusion)\nexport const userCredits = pgTable(\&quot;user_credits\&quot;, {\n  id: serial(\&quot;id\&quot;).primaryKey(),\n  userId: integer(\&quot;userId\&quot;).notNull().references(() =&gt; users.id, { onDelete: 'cascade' }).unique(),\n  balance: real(\&quot;balance\&quot;).notNull().default(0), // Balance in USD\n  createdAt: timestamp(\&quot;createdAt\&quot;).defaultNow(),\n  updatedAt: timestamp(\&quot;updatedAt\&quot;).defaultNow(),\n});\n````\n\n**VirtFusion tokens have a different conversion rate:**\n- **100 tokens = $1.00 USD**\n\n````typescript path=server/routes_new.ts mode=EXCERPT\nconst tokenAmount = parseFloat(virtFusionData.data.credit.tokens);\nconst dollarAmount = tokenAmount / 100; // 100 tokens = $1.00 USD\n````\n\n## 3. Daily Deduction Calculation for $5/month Plan\n\nFor a **$5/month DNS plan with 30-day billing cycles**:\n\n**Daily deduction amount = $5.00 ÷ 30 days = $0.167 per day (16.7 cents)**\n\nHowever, the current implementation shows that **DNS plans are billed monthly upfront**, not daily. The prorated calculation is used for plan changes:\n\n````typescript path=server/routes_new.ts mode=EXCERPT\nconst daysRemaining = Math.max(0, Math.ceil((billingCycleEndDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));\nconst proratedAmount = (newPlan.price - currentPlan.price) * (daysRemaining / 30);\n````\n\n## 4. Files Containing Billing Logic\n\n### Core Billing Files:\n- **`server/routes_new.ts`** - Main billing endpoints and logic\n- **`shared/schema.ts`** - Database schema for billing tables\n- **`server/virtfusion-api.ts`** - VirtFusion token management\n- **`client/src/pages/billing-page.tsx`** - Frontend billing interface\n\n### Database Tables:\n- **`user_credits`** - Custom credit balances\n- **`credit_transactions`** - Audit trail for custom credits\n- **`transactions`** - Main transaction history\n- **`dns_plans`** - DNS service pricing ($5, $15, $50)\n- **`dns_plan_subscriptions`** - User subscription management\n\n## 5. Daily/Hourly Deduction Calculations\n\n### VirtFusion (Hourly Deductions)\nVirtFusion handles hourly deductions automatically through their API. SkyPANEL tracks usage but doesn't calculate deductions:\n\n````typescript path=client/src/pages/billing-page.tsx mode=EXCERPT\n// Fetch VirtFusion usage data for last 30 days\nconst { data: usageData, isError: usageError, error: usageErrorData } = useQuery&lt;{ usage: number, rawData: any }&gt;({\n  queryKey: [\&quot;/api/billing/usage/last30days\&quot;],\n  staleTime: 300000, // 5 minutes\n});\n````\n\n### Custom Credits (Monthly Billing)\nCustom credits are deducted monthly upfront when purchasing DNS plans:\n\n````typescript path=server/routes_new.ts mode=EXCERPT\nconst newBalance = currentBalance - plan.price;\n// Create credit transaction record (audit trail)\nawait tx.insert(creditTransactionsTable).values({\n  userId: userId,\n  amount: -plan.price, // Negative for debit\n  type: 'dns_plan_purchase',\n  description: `DNS Plan Purchase: ${plan.name} using ${customCreditsName}`,\n  status: 'completed',\n  paymentMethod: customCreditsName.toLowerCase().replace(/\\s+/g, '_'),\n  balanceBefore: currentBalance,\n  balanceAfter: newBalance,\n});\n````\n\n## 6. Billing Proration and Cycle Management\n\n### Prorated Billing\nThe system **does implement prorated billing** for plan changes:\n\n````typescript path=server/routes_new.ts mode=EXCERPT\n// Calculate prorated amount based on proper monthly billing cycle\nconst now = new Date();\nlet billingCycleEndDate;\n\nif (currentSubscription.endDate.getFullYear() &gt; 2050) {\n  // This is a Free plan with far-future endDate, calculate proper monthly cycle\n  billingCycleEndDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // End of current month\n} else {\n  // This is a paid plan with proper billing cycle\n  billingCycleEndDate = new Date(currentSubscription.endDate);\n}\n\nconst daysRemaining = Math.max(0, Math.ceil((billingCycleEndDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));\nconst proratedAmount = (newPlan.price - currentPlan.price) * (daysRemaining / 30);\n````\n\n### Billing Cycle Start Dates\n**Billing cycles start on the 1st of each month**, not on user creation date. This ensures consistent monthly billing across all users.\n\n### Special Custom Credit Handling\nCustom credits have comprehensive transaction tracking with audit trails, admin management capabilities, and PayPal integration for purchases. The system maintains separate balances for VirtFusion tokens and custom credits, providing flexibility for different service types.\n\nThe implementation shows a sophisticated dual billing system that separates VPS services (hourly VirtFusion billing) from platform services (monthly custom credit billing), with proper prorated calculations and comprehensive transaction tracking.\n&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;The following code sections were retrieved:\nPath: server/routes/api-v1-routes.ts\n...\n   109\t\n   110\t    // If user has VirtFusion account linked, fetch their tokens\n   111\t    if (user.virtFusionId) {\n   112\t      try {\n   113\t        const { VirtFusionApi } = await import('../virtfusion-api');\n   114\t        const virtFusionApi = new VirtFusionApi();\n   115\t        if (virtFusionApi.isConfigured()) {\n   116\t          // Use the VirtFusion API to get user hourly stats (which contains credit info)\n   117\t          const virtFusionData = await virtFusionApi.getUserHourlyStats(user.id);\n   118\t\n   119\t          if (virtFusionData?.data?.credit?.tokens) {\n   120\t            const tokenAmount = parseFloat(virtFusionData.data.credit.tokens);\n   121\t            const dollarAmount = tokenAmount / 100; // 100 tokens = $1.00 USD\n   122\t\n   123\t            response.virtFusionTokens = tokenAmount || 0;\n   124\t            response.virtFusionCredits = dollarAmount || 0;\n   125\t          }\n   126\t        }\n...\nPath: server/virtfusion-user-service.ts\n...\n     4\t\n     5\t/**\n     6\t * Service for handling VirtFusion user operations\n     7\t */\n     8\texport class VirtFusionUserService {\n     9\t  /**\n    10\t   * Get VirtFusion user creation settings from database\n    11\t   * @returns Settings object with user creation parameters\n    12\t   */\n    13\t  private static async getUserCreationSettings(): Promise&lt;{\n    14\t    selfService: number;\n    15\t    selfServiceHourlyCredit: boolean;\n    16\t    selfServiceHourlyResourcePack: number;\n    17\t    defaultResourcePack: number;\n    18\t  }&gt; {\n    19\t    // Get settings from database with default fallbacks\n    20\t    const selfServiceSetting = await storage.getSetting('virtfusion_self_service');\n    21\t    const selfServiceCreditSetting = await storage.getSetting('virtfusion_self_service_hourly_credit');\n    22\t    const selfServicePackSetting = await storage.getSetting('virtfusion_self_service_hourly_resource_pack_id');\n    23\t    const defaultPackSetting = await storage.getSetting('virtfusion_default_resource_pack_id');\n    24\t    \n    25\t    // Parse settings with fallbacks to defaults\n    26\t    return {\n    27\t      selfService: selfServiceSetting ? parseInt(selfServiceSetting.value, 10) : 1,\n    28\t      selfServiceHourlyCredit: selfServiceCreditSetting ? selfServiceCreditSetting.value === 'true' : true,\n    29\t      selfServiceHourlyResourcePack: selfServicePackSetting ? parseInt(selfServicePackSetting.value, 10) : 1,\n    30\t      defaultResourcePack: defaultPackSetting ? parseInt(defaultPackSetting.value, 10) : 1\n    31\t    };\n    32\t  }\n...\nPath: server/routes/api-only-routes.ts\n...\n    90\t\n    91\t      // If user has VirtFusion account linked, fetch their tokens\n    92\t      if (user.virtFusionId) {\n    93\t        try {\n    94\t          const { VirtFusionApi } = await import('../virtfusion-api');\n    95\t          const virtFusionApi = new VirtFusionApi();\n    96\t          if (virtFusionApi.isConfigured()) {\n    97\t            // Use the VirtFusion API to get user hourly stats (which contains credit info)\n    98\t            const virtFusionData = await virtFusionApi.getUserHourlyStats(user.id);\n    99\t\n   100\t            if (virtFusionData?.data?.credit?.tokens) {\n   101\t              const tokenAmount = parseFloat(virtFusionData.data.credit.tokens);\n   102\t              const dollarAmount = tokenAmount / 100; // 100 tokens = $1.00 USD\n   103\t\n   104\t              response.virtFusionTokens = tokenAmount || 0;\n   105\t              response.virtFusionCredits = dollarAmount || 0;\n   106\t            }\n   107\t          }\n...\nPath: .github/copilot/dual-billing-system.md\n     1\t# SkyPANEL Dual Billing System\n     2\t\n     3\t## Overview\n     4\tThe Dual Billing System in SkyPANEL provides a comprehensive financial infrastructure that separates VirtFusion VPS services from other platform services. It combines VirtFusion token management with a custom credit system, providing flexible payment options through PayPal integration.\n     5\t\n     6\t## Core Components\n     7\t\n     8\t### VirtFusion Token Management\n     9\t- **Purpose**: Exclusively for VPS services management\n    10\t- **Storage**: External (VirtFusion infrastructure)\n    11\t- **Exchange Rate**: 100 tokens = $1.00 USD\n    12\t- **API Integration**: Complete VirtFusion API integration for token purchases and management\n    13\t- **Transaction Tracking**: Synchronized with SkyPANEL transaction history\n...\nPath: md-docs/dual-billing-system.md\n     1\t# Dual Billing System Implementation\n     2\t\n     3\t## Overview\n     4\t\n     5\tSkyPANEL now implements a comprehensive dual billing system that separates VirtFusion VPS services from other platform services. This system maintains the existing VirtFusion integration while adding a new custom credit system for DNS plans, dedicated servers, and future services.\n     6\t\n     7\t## System Architecture\n     8\t\n     9\t### VirtFusion Tokens\n    10\t- **Purpose**: Exclusively for VPS services\n    11\t- **Management**: Via VirtFusion API\n    12\t- **Storage**: External (VirtFusion infrastructure)\n    13\t- **Exchange Rate**: 100 tokens = $1.00 USD\n    14\t- **Payment**: PayPal integration\n...\nPath: server/routes_new.ts\n...\n  4084\t\n  4085\t      // If user has VirtFusion account linked, fetch their tokens\n  4086\t      if (user.virtFusionId) {\n  4087\t        try {\n  4088\t          const virtFusionApi = new VirtFusionApi();\n  4089\t          if (virtFusionApi.isConfigured()) {\n  4090\t            // Use the VirtFusion API to get user hourly stats (which contains credit info)\n  4091\t            const virtFusionData = await virtFusionApi.getUserHourlyStats(user.id);\n  4092\t\n  4093\t            if (virtFusionData?.data?.credit?.tokens) {\n  4094\t              const tokenAmount = parseFloat(virtFusionData.data.credit.tokens);\n  4095\t              const dollarAmount = tokenAmount / 100; // 100 tokens = $1.00 USD\n  4096\t\n  4097\t              response.virtFusionTokens = tokenAmount || 0;\n  4098\t              response.virtFusionCredits = dollarAmount || 0;\n  4099\t            }\n  4100\t          }\n  4101\t        } catch (virtFusionError) {\n  4102\t          console.error(\&quot;Error fetching VirtFusion credits:\&quot;, virtFusionError);\n  4103\t          // Return empty VirtFusion data if API call fails\n  4104\t        }\n  4105\t      }\n...\n  4163\t\n  4164\t      console.log(`User has VirtFusion extRelationId: ${req.user!.virtFusionId}`);\n  4165\t\n  4166\t      // Check VirtFusion API configuration\n  4167\t      const virtFusionApi = new VirtFusionApi();\n  4168\t      await virtFusionApi.updateSettings();\n  4169\t\n  4170\t      // Validate VirtFusion API settings before proceeding\n  4171\t      if (!virtFusionApi.isConfigured()) {\n  4172\t        console.error(\&quot;VirtFusion API is not properly configured\&quot;);\n  4173\t        return res.status(500).json({\n  4174\t          error: \&quot;VirtFusion API configuration is incomplete. Please contact support.\&quot;,\n  4175\t          details: \&quot;Missing API URL or token\&quot;\n  4176\t        });\n  4177\t      }\n  4178\t\n  4179\t      // Calculate the number of tokens to add to VirtFusion\n  4180\t      const tokens = amount * 100; // $1 = 100 tokens\n  4181\t      console.log(`Converting $${amount} to ${tokens} VirtFusion tokens`);\n...\n  7706\t\n  7707\t      // Convert from tokens to dollars (100 tokens = $1.00)\n  7708\t      const creditAmount = tokenAmount;\n  7709\t      const dollarAmount = Number(tokenAmount) / 100;\n  7710\t\n  7711\t      console.log(`Found matching transaction ${transaction.id}: \&quot;${transaction.description}\&quot;`);\n  7712\t      console.log(`Removing credit ID ${creditId} (${creditAmount} tokens = $${dollarAmount}) from VirtFusion for user ${userId}`);\n  7713\t\n  7714\t      // Use direct axios call to VirtFusion API\n  7715\t      const virtFusionApiUrl = process.env.VIRTFUSION_API_URL || 'https://vdc.skyvps360.xyz/api/v1';\n  7716\t      const virtFusionApiToken = process.env.VIRTFUSION_API_TOKEN;\n  7717\t\n  7718\t      if (!virtFusionApiUrl || !virtFusionApiToken) {\n  7719\t        return res.status(500).json({ error: \&quot;VirtFusion API URL or token not configured\&quot; });\n  7720\t      }\n...\nPath: client/src/pages/billing-page.tsx\n...\n   118\t\n   119\t\n   120\t\n   121\t  // Fetch balance data (both VirtFusion tokens and custom credits)\n   122\t  const { data: balanceData } = useQuery&lt;{\n   123\t    virtFusionCredits: number,\n   124\t    virtFusionTokens: number,\n   125\t    customCredits: number\n   126\t  }&gt;({\n   127\t    queryKey: [\&quot;/api/billing/balance\&quot;],\n   128\t  });\n   129\t\n   130\t  // Fetch VirtFusion usage data for last 30 days\n   131\t  const { data: usageData, isError: usageError, error: usageErrorData } = useQuery&lt;{ usage: number, rawData: any }&gt;({\n   132\t    queryKey: [\&quot;/api/billing/usage/last30days\&quot;],\n   133\t    staleTime: 300000, // 5 minutes\n   134\t  });\n   135\t\n   136\t  // Log usage data when it changes\n   137\t  React.useEffect(() =&gt; {\n   138\t    if (usageData) {\n   139\t      console.log(\&quot;VirtFusion usage data:\&quot;, usageData);\n   140\t    }\n   141\t    if (usageError) {\n   142\t      console.error(\&quot;VirtFusion usage API error:\&quot;, usageErrorData);\n   143\t    }\n   144\t  }, [usageData, usageError, usageErrorData]);\n...\nPath: server/virtfusion-api.ts\n     1\timport https from \&quot;https\&quot;;\n     2\timport axios from \&quot;axios\&quot;;\n     3\timport { storage } from \&quot;./storage\&quot;;\n     4\t\n     5\t// VirtFusion API class for centralizing API calls\n     6\texport class VirtFusionApi {\n     7\t  private apiUrl: string;\n     8\t  private apiToken: string;\n     9\t  private sslVerify: boolean;\n    10\t\n    11\t  constructor() {\n    12\t    // Default values - will be updated with getSettings()\n    13\t    // Make sure the URL doesn't have a trailing slash and doesn't include /api/v1 twice\n    14\t    const apiUrl = process.env.VIRTFUSION_API_URL || \&quot;https://skyvps360.xyz\&quot;;\n    15\t    this.apiUrl = apiUrl.endsWith(\&quot;/\&quot;) ? apiUrl.slice(0, -1) : apiUrl;\n    16\t\n    17\t    // Ensure API URL ends with /api/v1\n    18\t    if (!this.apiUrl.endsWith(\&quot;/api/v1\&quot;)) {\n    19\t      this.apiUrl = `${this.apiUrl}/api/v1`;\n    20\t    }\n    21\t\n    22\t    this.apiToken = process.env.VIRTFUSION_API_TOKEN || \&quot;\&quot;;\n    23\t    this.sslVerify = true;\n    24\t  }\n...\n    35\t\n    36\t  // Update API settings from environment variables\n    37\t  async updateSettings() {\n    38\t    try {\n    39\t      console.log(\&quot;VirtFusion API Settings - Current values:\&quot;, {\n    40\t        apiUrl: this.apiUrl,\n    41\t        apiToken: this.apiToken ? \&quot;***\&quot; : \&quot;not set\&quot;,\n    42\t        sslVerify: this.sslVerify,\n    43\t      });\n    44\t\n    45\t      // Try to get settings from database\n    46\t      const apiUrlSetting = await storage.getSetting(\&quot;virtfusion_api_url\&quot;);\n    47\t      const apiTokenSetting = await storage.getSetting(\&quot;virtfusion_api_token\&quot;);\n    48\t      const sslVerifySetting = await storage.getSetting(\&quot;virtfusion_ssl_verify\&quot;);\n    49\t\n    50\t      // Update with database settings if available\n    51\t      if (apiUrlSetting) {\n    52\t        this.apiUrl = apiUrlSetting.value;\n    53\t        // Ensure it ends with /api/v1\n    54\t        if (!this.apiUrl.endsWith(\&quot;/api/v1\&quot;)) {\n    55\t          this.apiUrl = `${this.apiUrl}/api/v1`;\n    56\t        }\n    57\t      }\n    58\t\n    59\t      if (apiTokenSetting) {\n    60\t        this.apiToken = apiTokenSetting.value;\n    61\t      }\n    62\t\n    63\t      if (sslVerifySetting) {\n    64\t        this.sslVerify = sslVerifySetting.value === \&quot;true\&quot;;\n    65\t      }\n    66\t\n    67\t      // Log updated settings\n    68\t      console.log(\&quot;VirtFusion API Settings - Updated values:\&quot;, {\n    69\t        apiUrl: this.apiUrl,\n    70\t        apiToken: this.apiToken ? \&quot;***\&quot; : \&quot;not set\&quot;,\n    71\t        sslVerify: this.sslVerify,\n    72\t      });\n    73\t\n    74\t      return true;\n    75\t    } catch (error) {\n    76\t      console.error(\&quot;Error updating VirtFusion API settings:\&quot;, error);\n    77\t      return false;\n    78\t    }\n    79\t  }\n    80\t\n    81\t  // Test the API connection\n    82\t  async testConnection() {\n    83\t    try {\n    84\t      await this.updateSettings();\n    85\t      return this.request(\&quot;GET\&quot;, \&quot;/account\&quot;);\n    86\t    } catch (error) {\n    87\t      console.error(\&quot;VirtFusion connection test failed:\&quot;, error);\n    88\t      throw error;\n    89\t    }\n    90\t  }\n...\n   123\t\n   124\t      const fullUrl = `${apiBase}${normalizedEndpoint.startsWith(\&quot;/\&quot;) ? normalizedEndpoint : \&quot;/\&quot; + normalizedEndpoint}`;\n   125\t\n   126\t      // Log request details (mask token for security)\n   127\t      const maskedToken =\n   128\t        this.apiToken.length &gt; 8\n   129\t          ? `${this.apiToken.substring(0, 4)}...${this.apiToken.substring(this.apiToken.length - 4)}`\n   130\t          : \&quot;********\&quot;;\n   131\t      console.log(`Making ${method} request to ${fullUrl}`);\n   132\t      console.log(`Using token: ${maskedToken}`);\n   133\t      console.log(`SSL verification: ${this.sslVerify}`);\n   134\t\n   135\t      if (data) {\n   136\t        console.log(`Request data: ${JSON.stringify(data, null, 2)}`);\n   137\t      }\n   138\t\n   139\t      try {\n   140\t        const response = await axios({\n   141\t          method,\n   142\t          url: fullUrl,\n   143\t          headers: {\n   144\t            Authorization: `Bearer ${this.apiToken}`,\n   145\t            \&quot;Content-Type\&quot;: \&quot;application/json\&quot;,\n   146\t            Accept: \&quot;application/json, */*\&quot;,\n   147\t          },\n   148\t          data,\n   149\t          // Apply SSL verification setting\n   150\t          httpsAgent: new https.Agent({ rejectUnauthorized: this.sslVerify }),\n   151\t          // Add a timeout to prevent hanging requests\n   152\t          timeout: 30000,\n   153\t        });\n   154\t\n   155\t        // Log response status\n   156\t        console.log(`VirtFusion API Response status: ${response.status}`);\n   157\t\n   158\t        // Check if response contains data\n   159\t        if (!response.data) {\n   160\t          console.warn(\&quot;Empty response data from VirtFusion API\&quot;);\n   161\t          return null;\n   162\t        }\n...\n   435\t\n   436\t  /**\n   437\t   * Add credit to a user by external relation ID\n   438\t   * @param extRelationId The external relation ID (our user ID)\n   439\t   * @param tokenData Object containing tokens and optional reference data\n   440\t   * @returns API response containing credit ID\n   441\t   */\n   442\t  async addCreditToUser(extRelationId: number, tokenData: {\n   443\t    tokens: number;\n   444\t    reference_1?: number;\n   445\t    reference_2?: string;\n   446\t  }) {\n   447\t    console.log(`Adding ${tokenData.tokens} tokens to user with extRelationId ${extRelationId}`);\n   448\t    return this.request(\n   449\t      \&quot;POST\&quot;,\n   450\t      `/selfService/credit/byUserExtRelationId/${extRelationId}`,\n   451\t      tokenData\n   452\t    );\n   453\t  }\n...\n   615\t\n   616\t  // Get server traffic statistics\n   617\t  async getServerTraffic(serverId: number) {\n   618\t    try {\n   619\t      // Call the traffic statistics endpoint\n   620\t      const response = await this.request(\&quot;GET\&quot;, `/servers/${serverId}/traffic`);\n   621\t      return response;\n   622\t    } catch (error) {\n   623\t      console.error(`Error in getServerTraffic for server ${serverId}:`, error);\n   624\t      throw error;\n   625\t    }\n   626\t  }\n   627\t\n   628\t  // No longer using this method - removed\n   629\t\n   630\t  // Get all hypervisors from VirtFusion API\n   631\t  async getHypervisors() {\n   632\t    return this.request(\&quot;GET\&quot;, \&quot;/compute/hypervisors\&quot;);\n   633\t  }\n   634\t\n   635\t  // Server power management functions\n   636\t\n   637\t  /**\n   638\t   * Boot a server\n   639\t   * @param serverId The server ID\n   640\t   * @returns API response\n   641\t   */\n   642\t  async bootServer(serverId: number) {\n   643\t    console.log(`Booting server ID: ${serverId}`);\n   644\t    return this.request(\&quot;POST\&quot;, `/servers/${serverId}/boot`);\n   645\t  }\n...\n   811\t\n   812\t  /**\n   813\t   * Get user usage statistics by external relation ID (our user ID)\n   814\t   * @param extRelationId The external relation ID (our user ID)\n   815\t   * @param period Optional period for usage data in YYYY-MM-DD format\n   816\t   * @param range Optional range for usage data (d=day, w=week, m=month)\n   817\t   * @returns Usage data from VirtFusion\n   818\t   */\n   819\t  async getUserUsageByExtRelationId(extRelationId: number, period?: string, range: string = \&quot;m\&quot;) {\n   820\t    // Get current date in YYYY-MM-DD format if period is not provided\n   821\t    if (!period) {\n   822\t      const today = new Date();\n   823\t      const year = today.getFullYear();\n   824\t      const month = String(today.getMonth() + 1).padStart(2, '0');\n   825\t      const day = String(today.getDate()).padStart(2, '0');\n   826\t      period = `${year}-${month}-${day}`;\n   827\t    }\n   828\t\n   829\t    const endpoint = `/selfService/usage/byUserExtRelationId/${extRelationId}?period[]=${period}&amp;range=${range}`;\n   830\t    return this.request(\&quot;GET\&quot;, endpoint);\n   831\t  }\n   832\t}\n   833\t\n   834\t// Create a singleton instance of the VirtFusion API client\n   835\texport const virtFusionApi = new VirtFusionApi();...\nPath: md-docs/virtfusion-integration.md\n     1\t# VirtFusion Integration Guide\n     2\t\n     3\tThis document provides comprehensive documentation for the VirtFusion integration in SkyPANEL, including setup, configuration, and usage.\n     4\t\n     5\t## Table of Contents\n     6\t\n     7\t- [Overview](#overview)\n     8\t- [Prerequisites](#prerequisites)\n     9\t- [Setup and Configuration](#setup-and-configuration)\n    10\t- [API Integration](#api-integration)\n    11\t- [Server Management](#server-management)\n    12\t- [User Management](#user-management)\n    13\t- [Billing Integration](#billing-integration)\n    14\t- [Error Handling](#error-handling)\n    15\t- [Troubleshooting](#troubleshooting)\n    16\t- [Best Practices](#best-practices)\n    17\t\n    18\t## Overview\n    19\t\n    20\tSkyPANEL integrates with VirtFusion to provide comprehensive VPS hosting management capabilities. This integration allows users to manage their virtual servers, monitor resources, and handle billing through a unified interface.\n    21\t\n    22\t## Prerequisites\n    23\t\n    24\t- VirtFusion API access\n    25\t- Valid API credentials\n    26\t- Sufficient permissions for the required operations\n    27\t- Network access to the VirtFusion API endpoint\n    28\t\n    29\t## Setup and Configuration\n    30\t\n    31\t### Environment Variables\n    32\t\n    33\tAdd the following environment variables to your `.env` file:\n    34\t\n    35\t```env\n    36\t# VirtFusion Configuration\n    37\tVIRT_FUSION_API_URL=https://api.virtfusion.example.com\n    38\tVIRT_FUSION_API_KEY=your_api_key_here\n    39\tVIRT_FUSION_API_SECRET=your_api_secret_here\n    40\tVIRT_FUSION_WEBHOOK_SECRET=your_webhook_secret\n    41\t```\n    42\t\n    43\t### Initialization\n...\n    63\t\n    64\texport const virtFusionService = new VirtFusionService();\n    65\t```\n    66\t\n    67\t## API Integration\n    68\t\n    69\t### Authentication\n    70\t\n    71\tSkyPANEL uses API key authentication to communicate with the VirtFusion API. The authentication is handled automatically by the `VirtFusionAPI` class.\n    72\t\n    73\t### Rate Limiting\n    74\t\n    75\tThe integration includes built-in rate limiting to prevent hitting VirtFusion API limits:\n    76\t\n    77\t- 60 requests per minute per IP address\n    78\t- Exponential backoff for rate-limited requests\n    79\t- Request queuing for high-volume operations\n    80\t\n    81\t## Server Management\n    82\t\n    83\t### Key Features\n    84\t\n    85\t- Server provisioning\n    86\t- Server status monitoring\n    87\t- Resource usage tracking\n    88\t- Server actions (start, stop, restart, etc.)\n    89\t- Console access\n    90\t\n    91\t### Example: List Servers\n...\n   140\t```\n   141\t\n   142\t## Billing Integration\n   143\t\n   144\t### Key Features\n   145\t\n   146\t- Subscription management\n   147\t- Invoice generation\n   148\t- Payment processing\n   149\t- Usage tracking\n   150\t\n   151\t### Example: Create Subscription\n   152\t\n   153\t```typescript\n   154\tasync createSubscription(subscriptionData: SubscriptionData): Promise&lt;Subscription&gt; {\n   155\t  try {\n   156\t    const response = await this.api.post&lt;Subscri...&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_vrtx_01SuqK9cw5mWBVGmQSAC8ZKR&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;,&quot;folderRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-09T14:39:44.760Z&quot;,&quot;response_text&quot;:&quot;Based on my analysis of the SkyPANEL codebase, I can now provide you with a comprehensive explanation of the billing system implementation. Let me break this down systematically:\n\n## 1. How Billing Cycles and Deductions Are Currently Handled\n\nThe SkyPANEL system implements a **dual billing system** with two separate credit systems:\n\n### VirtFusion Tokens (for VPS services)\n- **Managed externally** through VirtFusion API\n- **Hourly deductions** handled by VirtFusion infrastructure\n- **Real-time usage tracking** via VirtFusion API calls\n\n### Custom Credits (for DNS plans and other services)\n- **Monthly billing cycles** that align with calendar months\n- **Billing cycles start on the 1st of each month** (not user creation date)\n- **Prorated billing** for mid-month changes\n\n````typescript path=server/routes_new.ts mode=EXCERPT\n// Calculate billing cycle end date - always end on the last day of the current month\n// This ensures monthly billing cycles align with calendar months starting on the 1st\nconst endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // Last day of current month\nconst nextPaymentDate = new Date(endDate.getTime() - 3 * 24 * 60 * 60 * 1000); // 3 days before expiry\n````\n\n## 2. USD Pricing and Custom Credits Conversion Rate\n\n**There is a 1:1 conversion rate between USD and custom credits.**\n\nThe system stores custom credit balances directly in USD:\n\n````typescript path=shared/schema.ts mode=EXCERPT\n// User Credits (Custom Credits System - separate from VirtFusion)\nexport const userCredits = pgTable(\&quot;user_credits\&quot;, {\n  id: serial(\&quot;id\&quot;).primaryKey(),\n  userId: integer(\&quot;userId\&quot;).notNull().references(() =&gt; users.id, { onDelete: 'cascade' }).unique(),\n  balance: real(\&quot;balance\&quot;).notNull().default(0), // Balance in USD\n  createdAt: timestamp(\&quot;createdAt\&quot;).defaultNow(),\n  updatedAt: timestamp(\&quot;updatedAt\&quot;).defaultNow(),\n});\n````\n\n**VirtFusion tokens have a different conversion rate:**\n- **100 tokens = $1.00 USD**\n\n````typescript path=server/routes_new.ts mode=EXCERPT\nconst tokenAmount = parseFloat(virtFusionData.data.credit.tokens);\nconst dollarAmount = tokenAmount / 100; // 100 tokens = $1.00 USD\n````\n\n## 3. Daily Deduction Calculation for $5/month Plan\n\nFor a **$5/month DNS plan with 30-day billing cycles**:\n\n**Daily deduction amount = $5.00 ÷ 30 days = $0.167 per day (16.7 cents)**\n\nHowever, the current implementation shows that **DNS plans are billed monthly upfront**, not daily. The prorated calculation is used for plan changes:\n\n````typescript path=server/routes_new.ts mode=EXCERPT\nconst daysRemaining = Math.max(0, Math.ceil((billingCycleEndDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));\nconst proratedAmount = (newPlan.price - currentPlan.price) * (daysRemaining / 30);\n````\n\n## 4. Files Containing Billing Logic\n\n### Core Billing Files:\n- **`server/routes_new.ts`** - Main billing endpoints and logic\n- **`shared/schema.ts`** - Database schema for billing tables\n- **`server/virtfusion-api.ts`** - VirtFusion token management\n- **`client/src/pages/billing-page.tsx`** - Frontend billing interface\n\n### Database Tables:\n- **`user_credits`** - Custom credit balances\n- **`credit_transactions`** - Audit trail for custom credits\n- **`transactions`** - Main transaction history\n- **`dns_plans`** - DNS service pricing ($5, $15, $50)\n- **`dns_plan_subscriptions`** - User subscription management\n\n## 5. Daily/Hourly Deduction Calculations\n\n### VirtFusion (Hourly Deductions)\nVirtFusion handles hourly deductions automatically through their API. SkyPANEL tracks usage but doesn't calculate deductions:\n\n````typescript path=client/src/pages/billing-page.tsx mode=EXCERPT\n// Fetch VirtFusion usage data for last 30 days\nconst { data: usageData, isError: usageError, error: usageErrorData } = useQuery&lt;{ usage: number, rawData: any }&gt;({\n  queryKey: [\&quot;/api/billing/usage/last30days\&quot;],\n  staleTime: 300000, // 5 minutes\n});\n````\n\n### Custom Credits (Monthly Billing)\nCustom credits are deducted monthly upfront when purchasing DNS plans:\n\n````typescript path=server/routes_new.ts mode=EXCERPT\nconst newBalance = currentBalance - plan.price;\n// Create credit transaction record (audit trail)\nawait tx.insert(creditTransactionsTable).values({\n  userId: userId,\n  amount: -plan.price, // Negative for debit\n  type: 'dns_plan_purchase',\n  description: `DNS Plan Purchase: ${plan.name} using ${customCreditsName}`,\n  status: 'completed',\n  paymentMethod: customCreditsName.toLowerCase().replace(/\\s+/g, '_'),\n  balanceBefore: currentBalance,\n  balanceAfter: newBalance,\n});\n````\n\n## 6. Billing Proration and Cycle Management\n\n### Prorated Billing\nThe system **does implement prorated billing** for plan changes:\n\n````typescript path=server/routes_new.ts mode=EXCERPT\n// Calculate prorated amount based on proper monthly billing cycle\nconst now = new Date();\nlet billingCycleEndDate;\n\nif (currentSubscription.endDate.getFullYear() &gt; 2050) {\n  // This is a Free plan with far-future endDate, calculate proper monthly cycle\n  billingCycleEndDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // End of current month\n} else {\n  // This is a paid plan with proper billing cycle\n  billingCycleEndDate = new Date(currentSubscription.endDate);\n}\n\nconst daysRemaining = Math.max(0, Math.ceil((billingCycleEndDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));\nconst proratedAmount = (newPlan.price - currentPlan.price) * (daysRemaining / 30);\n````\n\n### Billing Cycle Start Dates\n**Billing cycles start on the 1st of each month**, not on user creation date. This ensures consistent monthly billing across all users.\n\n### Special Custom Credit Handling\nCustom credits have comprehensive transaction tracking with audit trails, admin management capabilities, and PayPal integration for purchases. The system maintains separate balances for VirtFusion tokens and custom credits, providing flexibility for different service types.\n\nThe implementation shows a sophisticated dual billing system that separates VPS services (hourly VirtFusion billing) from platform services (monthly custom credit billing), with proper prorated calculations and comprehensive transaction tracking.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;request_id&quot;:&quot;e1347130-bc84-4ed6-bd30-2b19e5e31edb&quot;,&quot;status&quot;:&quot;cancelled&quot;,&quot;chatItemType&quot;:&quot;agentic-turn-delimiter&quot;},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;b0e46a81-d6d7-4046-991c-68edddaa9583&quot;,&quot;request_message&quot;:&quot;can you explain it simpler&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;can you explain it simpler&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Sure! Let me break down the SkyPANEL billing system in simple terms:\n\n## Two Separate Billing Systems\n\n**1. VirtFusion Tokens (for VPS servers)**\n- 100 tokens = $1 USD\n- Charged hourly automatically by VirtFusion\n- SkyPANEL just displays the balance\n\n**2. Custom Credits (for DNS plans)**\n- 1 credit = $1 USD (direct 1:1 conversion)\n- Charged monthly upfront\n- Managed entirely by SkyPANEL\n\n## How DNS Billing Works\n\nFor a **$5/month DNS plan**:\n- You pay the full $5 upfront when you subscribe\n- The plan lasts for one month\n- **No daily deductions** - it's a one-time monthly payment\n\nIf you calculated daily cost: $5 ÷ 30 days = **$0.167 per day** (about 17 cents)\n\n## Billing Cycles\n\n- **All billing cycles start on the 1st of each month**\n- If you sign up mid-month, you get prorated pricing\n- Example: Sign up on the 15th → pay half price, plan expires on the last day of the month\n\n## Key Files\n\n&lt;augment_code_snippet path=\&quot;server/routes_new.ts\&quot; mode=\&quot;EXCERPT\&quot;&gt;\n```typescript\n// Main billing logic is here\nconst newBalance = currentBalance - plan.price;\n```\n&lt;/augment_code_snippet&gt;\n\n&lt;augment_code_snippet path=\&quot;shared/schema.ts\&quot; mode=\&quot;EXCERPT\&quot;&gt;\n```typescript\n// Custom credits stored in USD\nbalance: real(\&quot;balance\&quot;).notNull().default(0), // Balance in USD\n```\n&lt;/augment_code_snippet&gt;\n\n## Simple Summary\n\n- **VirtFusion**: Hourly billing, 100 tokens = $1\n- **Custom Credits**: Monthly billing, 1 credit = $1  \n- **DNS Plans**: Pay full month upfront, no daily charges\n- **Billing starts**: 1st of every month\n- **Mid-month signup**: Prorated pricing until month end\n\nThe system is designed so VirtFusion handles the complex hourly server billing, while SkyPANEL handles simple monthly service billing.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;Sure! Let me break down the SkyPANEL billing system in simple terms:\n\n## Two Separate Billing Systems\n\n**1. VirtFusion Tokens (for VPS servers)**\n- 100 tokens = $1 USD\n- Charged hourly automatically by VirtFusion\n- SkyPANEL just displays the balance\n\n**2. Custom Credits (for DNS plans)**\n- 1 credit = $1 USD (direct 1:1 conversion)\n- Charged monthly upfront\n- Managed entirely by SkyPANEL\n\n## How DNS Billing Works\n\nFor a **$5/month DNS plan**:\n- You pay the full $5 upfront when you subscribe\n- The plan lasts for one month\n- **No daily deductions** - it's a one-time monthly payment\n\nIf you calculated daily cost: $5 ÷ 30 days = **$0.167 per day** (about 17 cents)\n\n## Billing Cycles\n\n- **All billing cycles start on the 1st of each month**\n- If you sign up mid-month, you get prorated pricing\n- Example: Sign up on the 15th → pay half price, plan expires on the last day of the month\n\n## Key Files\n\n````typescript path=server/routes_new.ts mode=EXCERPT\n// Main billing logic is here\nconst newBalance = currentBalance - plan.price;\n````\n\n````typescript path=shared/schema.ts mode=EXCERPT\n// Custom credits stored in USD\nbalance: real(\&quot;balance\&quot;).notNull().default(0), // Balance in USD\n````\n\n## Simple Summary\n\n- **VirtFusion**: Hourly billing, 100 tokens = $1\n- **Custom Credits**: Monthly billing, 1 credit = $1  \n- **DNS Plans**: Pay full month upfront, no daily charges\n- **Billing starts**: 1st of every month\n- **Mid-month signup**: Prorated pricing until month end\n\nThe system is designed so VirtFusion handles the complex hourly server billing, while SkyPANEL handles simple monthly service billing.\n&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;can you explain it simpler&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;,&quot;folderRoot&quot;:&quot;C:/Users/moran/Documents/GitHub/SkyPANEL&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-06-09T14:41:06.003Z&quot;,&quot;response_text&quot;:&quot;Sure! Let me break down the SkyPANEL billing system in simple terms:\n\n## Two Separate Billing Systems\n\n**1. VirtFusion Tokens (for VPS servers)**\n- 100 tokens = $1 USD\n- Charged hourly automatically by VirtFusion\n- SkyPANEL just displays the balance\n\n**2. Custom Credits (for DNS plans)**\n- 1 credit = $1 USD (direct 1:1 conversion)\n- Charged monthly upfront\n- Managed entirely by SkyPANEL\n\n## How DNS Billing Works\n\nFor a **$5/month DNS plan**:\n- You pay the full $5 upfront when you subscribe\n- The plan lasts for one month\n- **No daily deductions** - it's a one-time monthly payment\n\nIf you calculated daily cost: $5 ÷ 30 days = **$0.167 per day** (about 17 cents)\n\n## Billing Cycles\n\n- **All billing cycles start on the 1st of each month**\n- If you sign up mid-month, you get prorated pricing\n- Example: Sign up on the 15th → pay half price, plan expires on the last day of the month\n\n## Key Files\n\n````typescript path=server/routes_new.ts mode=EXCERPT\n// Main billing logic is here\nconst newBalance = currentBalance - plan.price;\n````\n\n````typescript path=shared/schema.ts mode=EXCERPT\n// Custom credits stored in USD\nbalance: real(\&quot;balance\&quot;).notNull().default(0), // Balance in USD\n````\n\n## Simple Summary\n\n- **VirtFusion**: Hourly billing, 100 tokens = $1\n- **Custom Credits**: Monthly billing, 1 credit = $1  \n- **DNS Plans**: Pay full month upfront, no daily charges\n- **Billing starts**: 1st of every month\n- **Mid-month signup**: Prorated pricing until month end\n\nThe system is designed so VirtFusion handles the complex hourly server billing, while SkyPANEL handles simple monthly service billing.\n&quot;,&quot;workspace_file_chunks&quot;:[]}],&quot;feedbackStates&quot;:{&quot;temp-fe-210aad7a-c682-429f-9b92-937fc23617a6&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-b9723f4f-437a-477d-a377-eb3c5b192d29&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-1fb49d0f-e99f-4e41-87a4-a943d77cd45a&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-cab285f2-e6ce-4f91-8bcc-eda18e065900&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-95a6e747-fc79-4ba4-91b5-e86029871f09&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-d84dfce0-44ba-4926-b545-7b94a33872a5&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{&quot;71e9d8d8-69d4-4d60-9a5e-5e4dd9e66a96;toolu_vrtx_01QufCw2kMsHSAxmDzQBjvcz&quot;:{&quot;requestId&quot;:&quot;71e9d8d8-69d4-4d60-9a5e-5e4dd9e66a96&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01QufCw2kMsHSAxmDzQBjvcz&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;The following code sections were retrieved:\nPath: server/routes_new.ts\n...\n  4113\t\n  4114\t  // Add VirtFusion tokens via PayPal\n  4115\t  app.post(\&quot;/api/billing/add-credits\&quot;, isAuthenticated, async (req, res) =&gt; {\n  4116\t    try {\n  4117\t      const { amount, paymentId, verificationData } = req.body;\n  4118\t\n  4119\t      console.log(`Processing VirtFusion token purchase: amount=${amount}, paymentId=${paymentId}`);\n  4120\t\n  4121\t      if (!amount || amount &lt;= 0 || !paymentId) {\n  4122\t        console.log(\&quot;Invalid token purchase request - missing amount or paymentId\&quot;);\n  4123\t        return res.status(400).json({ error: \&quot;Invalid amount or payment ID\&quot; });\n  4124\t      }\n  4125\t\n  4126\t      // Validate amount limits (minimum $1, maximum $1000)\n  4127\t      if (amount &lt; 1) {\n  4128\t        console.log(`Amount too low: ${amount}`);\n  4129\t        return res.status(400).json({ error: \&quot;Minimum amount is $1.00\&quot; });\n  4130\t      }\n...\n  4241\t\n  4242\t        // Format the data for VirtFusion API\n  4243\t        const tokenData = {\n  4244\t          tokens: tokens,\n  4245\t          reference_1: createdTransaction.id,\n  4246\t          reference_2: `PayPal payment ID: ${paymentId}`\n  4247\t        };\n  4248\t\n  4249\t        console.log(`Sending to VirtFusion API with extRelationId=${extRelationId}:`, tokenData);\n  4250\t\n  4251\t        // Call the VirtFusion API to add tokens\n  4252\t        const virtFusionResult = await virtFusionApi.addCreditToUser(\n  4253\t          extRelationId,\n  4254\t          tokenData\n  4255\t        );\n...\n  4272\t\n  4273\t        // Get user's balance AFTER adding tokens to detect negative balance deduction\n  4274\t        try {\n  4275\t          console.log(\&quot;Fetching user's updated VirtFusion balance\&quot;);\n  4276\t          const updatedBalanceData = await virtFusionApi.getUserHourlyStats(req.user!.id);\n  4277\t          \n  4278\t          if (updatedBalanceData?.data?.credit?.tokens) {\n  4279\t            const updatedTokens = parseFloat(updatedBalanceData.data.credit.tokens);\n  4280\t            const updatedBalance = updatedTokens / 100; // Convert tokens to dollars\n  4281\t            console.log(`User's updated balance: ${updatedBalance.toFixed(2)} USD (${updatedTokens} tokens)`);\n  4282\t            \n  4283\t            // Calculate the expected balance increase\n  4284\t            const expectedBalance = initialBalance + amount;\n  4285\t            console.log(`Expected balance after adding $${amount}: $${expectedBalance.toFixed(2)}`);\n  4286\t               // Check if there was a negative balance deduction\n  4287\t          if (initialBalance &lt; 0) {\n  4288\t            // When initial balance is negative, calculate how much was actually deducted\n  4289\t            // If the user had -$3.50 and added $5.00, they should have $1.50\n  4290\t            // But if VirtFusion deducted the negative balance, they might have less\n  4291\t            const expectedBalance = initialBalance + amount;\n  4292\t            \n  4293\t            // Force the deduction amount to be at least the absolute value of the negative balance\n  4294\t            // This ensures we always show the proper amount that was deducted to cover the negative balance\n  4295\t            const deductionAmount = Math.abs(initialBalance); // Use the actual negative balance amount\n  4296\t            \n  4297\t            console.log(`Initial balance: $${initialBalance.toFixed(2)}`);\n  4298\t            console.log(`Added amount: $${amount.toFixed(2)}`);\n  4299\t            console.log(`Expected balance: $${expectedBalance.toFixed(2)}`);\n  4300\t            console.log(`Actual balance: $${updatedBalance.toFixed(2)}`);\n  4301\t            console.log(`Deduction amount: $${deductionAmount.toFixed(2)}`);\n...\n  4572\t\n  4573\t      if (existingActiveSubscriptions.length &gt; 0) {\n  4574\t        // Check if they already have this specific plan\n  4575\t        const hasThisPlan = existingActiveSubscriptions.some(sub =&gt; sub.planId === planId);\n  4576\t        if (hasThisPlan) {\n  4577\t          return res.status(400).json({ error: \&quot;You already have an active subscription for this plan\&quot; });\n  4578\t        } else {\n  4579\t          // They have a different plan - redirect to change endpoint\n  4580\t          return res.status(400).json({\n  4581\t            error: \&quot;You already have an active DNS plan. Use the plan change feature to upgrade or downgrade.\&quot;,\n  4582\t            shouldUseChangeEndpoint: true,\n  4583\t            currentPlans: existingActiveSubscriptions.map(sub =&gt; sub.planId)\n  4584\t          });\n  4585\t        }\n  4586\t      }\n  4587\t\n  4588\t      // Get user's custom credits balance\n  4589\t      const [userCredits] = await db.select()\n  4590\t        .from(userCreditsTable)\n  4591\t        .where(eq(userCreditsTable.userId, userId))\n  4592\t        .limit(1);\n...\n  4603\t\n  4604\t      const newBalance = currentBalance - plan.price;\n  4605\t      const now = new Date();\n  4606\t\n  4607\t      // Calculate billing cycle end date - always end on the last day of the current month\n  4608\t      // This ensures monthly billing cycles align with calendar months starting on the 1st\n  4609\t      const endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // Last day of current month\n  4610\t      const nextPaymentDate = new Date(endDate.getTime() - 3 * 24 * 60 * 60 * 1000); // 3 days before expiry\n  4611\t\n  4612\t      // Get dynamic custom credits name for transaction description\n  4613\t      const customCreditsName = await getCustomCreditsName();\n...\n  4644\t\n  4645\t        // Create credit transaction record (audit trail)\n  4646\t        await tx.insert(creditTransactionsTable).values({\n  4647\t          userId: userId,\n  4648\t          amount: -plan.price, // Negative for debit\n  4649\t          type: 'dns_plan_purchase',\n  4650\t          description: `DNS Plan Purchase: ${plan.name} using ${customCreditsName}`,\n  4651\t          status: 'completed',\n  4652\t          paymentMethod: customCreditsName.toLowerCase().replace(/\\s+/g, '_'),\n  4653\t          balanceBefore: currentBalance,\n  4654\t          balanceAfter: newBalance,\n  4655\t          metadata: {\n  4656\t            planId: plan.id,\n  4657\t            planName: plan.name,\n  4658\t            mainTransactionId: createdTransaction.id\n  4659\t          }\n  4660\t        });\n  4661\t\n  4662\t        // Create DNS plan subscription\n  4663\t        await tx.insert(dnsPlanSubscriptionsTable).values({\n  4664\t          userId: userId,\n  4665\t          planId: plan.id,\n  4666\t          status: 'active',\n  4667\t          startDate: now,\n  4668\t          endDate: endDate,\n  4669\t          autoRenew: true,\n  4670\t          lastPaymentDate: now,\n  4671\t          nextPaymentDate: nextPaymentDate\n  4672\t        });\n  4673\t      });\n...\n  4739\t\n  4740\t      if (activeSubscriptions.length === 0) {\n  4741\t        return res.status(404).json({ error: \&quot;No active DNS plan subscription found\&quot; });\n  4742\t      }\n  4743\t\n  4744\t      // Check if user already has the target plan\n  4745\t      const hasTargetPlan = activeSubscriptions.some(sub =&gt; sub.planId === planId);\n  4746\t      if (hasTargetPlan) {\n  4747\t        return res.status(400).json({ error: \&quot;You are already subscribed to this plan\&quot; });\n  4748\t      }\n  4749\t\n  4750\t      // For billing calculation, use the highest-tier current plan\n  4751\t      const currentSubscription = activeSubscriptions.sort((a, b) =&gt; b.plan!.price - a.plan!.price)[0];\n  4752\t\n  4753\t      const currentPlan = currentSubscription.plan!;\n  4754\t\n  4755\t      // Calculate prorated amount based on proper monthly billing cycle\n  4756\t      // For Free plans with far-future endDate, calculate from now to end of current month\n  4757\t      const now = new Date();\n  4758\t      let billingCycleEndDate;\n...\n  5029\t\n  5030\t        // CRITICAL FIX: Cancel ALL existing active subscriptions to enforce single-plan-per-user\n  5031\t        const activeSubscriptionIds = activeSubscriptions.map(sub =&gt; sub.id);\n  5032\t        await tx.update(dnsPlanSubscriptionsTable)\n  5033\t          .set({\n  5034\t            status: 'cancelled',\n  5035\t            autoRenew: false,\n  5036\t            updatedAt: now\n  5037\t          })\n  5038\t          .where(inArray(dnsPlanSubscriptionsTable.id, activeSubscriptionIds));\n  5039\t\n  5040\t        // Create a new subscription for the target plan\n  5041\t        await tx.insert(dnsPlanSubscriptionsTable).values({\n  5042\t          userId: userId,\n  5043\t          planId: newPlan.id,\n  5044\t          status: 'active',\n  5045\t          startDate: now,\n  5046\t          endDate: endDate,\n  5047\t          autoRenew: true,\n  5048\t          lastPaymentDate: now,\n  5049\t          nextPaymentDate: nextPaymentDate\n  5050\t        });\n  5051\t      });\n...\n  5252\t\n  5253\t  // Add custom credits via PayPal\n  5254\t  app.post(\&quot;/api/billing/custom-credits/add\&quot;, isAuthenticated, async (req, res) =&gt; {\n  5255\t    try {\n  5256\t      const { amount, paymentId, verificationData } = req.body;\n  5257\t\n  5258\t      console.log(`Processing custom credit purchase: amount=${amount}, paymentId=${paymentId}`);\n  5259\t\n  5260\t      if (!amount || amount &lt;= 0 || !paymentId) {\n  5261\t        console.log(\&quot;Invalid custom credit purchase request - missing amount or paymentId\&quot;);\n  5262\t        return res.status(400).json({ error: \&quot;Invalid amount or payment ID\&quot; });\n  5263\t      }\n  5264\t\n  5265\t      // Validate amount limits (minimum $1, maximum $1000)\n  5266\t      if (amount &lt; 1) {\n  5267\t        console.log(`Amount too low: ${amount}`);\n  5268\t        return res.status(400).json({ error: \&quot;Minimum amount is $1.00\&quot; });\n  5269\t      }\n  5270\t\n  5271\t      if (amount &gt; 1000) {\n  5272\t        console.log(`Amount too high: ${amount}`);\n  5273\t        return res.status(400).json({ error: \&quot;Maximum amount is $1000.00\&quot; });\n  5274\t      }\n  5275\t\n  5276\t      // Get dynamic custom credits name for transaction description\n  5277\t      const customCreditsName = await getCustomCreditsName();\n  5278\t\n  5279\t      // Create a new transaction record in the main transactions table for unified history\n  5280\t      const transaction: InsertTransaction = {\n  5281\t        userId: req.user!.id,\n  5282\t        amount: amount,\n  5283\t        type: \&quot;custom_credit\&quot;,\n  5284\t        description: `${customCreditsName} purchase via PayPal`,\n  5285\t        status: \&quot;pending\&quot;,\n  5286\t        paymentMethod: \&quot;paypal\&quot;,\n  5287\t        paymentId: paymentId,\n  5288\t      };\n...\n  7581\t\n  7582\t      // Get user's balance AFTER adding tokens to detect negative balance deduction\n  7583\t      try {\n  7584\t        console.log(\&quot;Fetching user's updated VirtFusion balance\&quot;);\n  7585\t        const updatedBalanceData = await api.getUserHourlyStats(userId);\n  7586\t        \n  7587\t        if (updatedBalanceData?.data?.credit?.tokens) {\n  7588\t          const updatedTokens = parseFloat(updatedBalanceData.data.credit.tokens);\n  7589\t          const updatedBalance = updatedTokens / 100; // Convert tokens to dollars\n  7590\t          console.log(`User's updated balance: ${updatedBalance.toFixed(2)} USD (${updatedTokens} tokens)`);\n  7591\t          \n  7592\t          // Calculate the expected balance increase\n  7593\t          const addedAmount = Number(amount) / 100; // Convert tokens to dollars\n  7594\t          const expectedBalance = initialBalance + addedAmount;\n  7595\t          console.log(`Expected balance after adding $${addedAmount}: $${expectedBalance.toFixed(2)}`);\n...\n  7615\t              \n  7616\t              console.log(\&quot;Creating deduction transaction record:\&quot;, deductionTransaction);\n  7617\t              const createdDeductionTransaction = await storage.createTransaction(deductionTransaction);\n  7618\t              console.log(\&quot;Deduction transaction created with ID:\&quot;, createdDeductionTransaction.id);\n  7619\t            }\n  7620\t          } else {\n  7621\t            console.log(\&quot;No negative balance deduction detected\&quot;);\n  7622\t          }\n  7623\t        } else {\n  7624\t          console.log(\&quot;Could not determine user's updated balance\&quot;);\n  7625\t        }\n  7626\t      } catch (balanceError) {\n  7627\t        console.error(\&quot;Error fetching updated balance:\&quot;, balanceError);\n  7628\t        // Continue without creating deduction record if we can't fetch the updated balance\n  7629\t      }\n...\nPath: md-docs/billing-system.md\n     1\t# Billing System\n     2\t\n     3\t## Overview\n     4\tThe Billing System in SkyPANEL manages all financial transactions, subscriptions, and invoicing for the platform. It integrates with payment gateways, tracks usage, and handles billing cycles for both customers and administrators.\n     5\t\n     6\t## Table of Contents\n     7\t- [Features](#features)\n     8\t- [Architecture](#architecture)\n     9\t- [Pricing Models](#pricing-models)\n    10\t- [Payment Gateways](#payment-gateways)\n    11\t- [Subscription Management](#subscription-management)\n    12\t- [Invoicing](#invoicing)\n    13\t- [Usage Tracking](#usage-tracking)\n    14\t- [Tax Handling](#tax-handling)\n    15\t- [Reporting](#reporting)\n    16\t- [Security](#security)\n    17\t- [Error Handling](#error-handling)\n    18\t- [Configuration](#configuration)\n    19\t\n    20\t## Features\n...\n    33\t\n    34\t### Components\n    35\t- **BillingService**: Core billing logic\n    36\t- **PaymentProcessor**: Handles payment gateway integration\n    37\t- **InvoiceGenerator**: Creates and manages invoices\n    38\t- **UsageTracker**: Tracks resource usage for billing\n    39\t- **TaxCalculator**: Handles tax calculations\n    40\t- **NotificationService**: Sends billing-related notifications\n    41\t\n    42\t### Data Flow\n    43\t1. Subscription created/updated\n    44\t2. Usage data collected\n    45\t3. Billing cycle ends\n    46\t4. Invoice generated\n    47\t5. Payment processed\n    48\t6. Receipt sent\n    49\t7. Records updated\n    50\t\n    51\t## Pricing Models\n    52\t\n    53\t### Subscription Plans\n    54\t1. **Fixed Price**\n    55\t   - Monthly/Annual billing\n    56\t   - Feature-based tiers\n    57\t   - Flat rate per period\n    58\t\n    59\t2. **Usage-Based**\n    60\t   - Pay-per-use pricing\n    61\t   - Tiered pricing\n    62\t   - Overage charges\n...\nPath: client/src/pages/billing-page.tsx\n...\n   118\t\n   119\t\n   120\t\n   121\t  // Fetch balance data (both VirtFusion tokens and custom credits)\n   122\t  const { data: balanceData } = useQuery&lt;{\n   123\t    virtFusionCredits: number,\n   124\t    virtFusionTokens: number,\n   125\t    customCredits: number\n   126\t  }&gt;({\n   127\t    queryKey: [\&quot;/api/billing/balance\&quot;],\n   128\t  });\n   129\t\n   130\t  // Fetch VirtFusion usage data for last 30 days\n   131\t  const { data: usageData, isError: usageError, error: usageErrorData } = useQuery&lt;{ usage: number, rawData: any }&gt;({\n   132\t    queryKey: [\&quot;/api/billing/usage/last30days\&quot;],\n   133\t    staleTime: 300000, // 5 minutes\n   134\t  });\n   135\t\n   136\t  // Log usage data when it changes\n   137\t  React.useEffect(() =&gt; {\n   138\t    if (usageData) {\n   139\t      console.log(\&quot;VirtFusion usage data:\&quot;, usageData);\n   140\t    }\n   141\t    if (usageError) {\n   142\t      console.error(\&quot;VirtFusion usage API error:\&quot;, usageErrorData);\n   143\t    }\n   144\t  }, [usageData, usageError, usageErrorData]);\n...\n   250\t\n   251\t  // Calculate billing summary combining both VirtFusion and custom credit data\n   252\t  const hasVirtFusionBalance = balanceData?.virtFusionCredits &amp;&amp; balanceData.virtFusionCredits &gt; 0;\n   253\t\n   254\t  // Calculate the spent and added amounts for the last 30 days from transactions (includes both VirtFusion and custom credits)\n   255\t  const spentFromTransactions = transactions\n   256\t    .filter(t =&gt; isDebit(t) &amp;&amp; new Date(t.createdAt) &gt; new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))\n   257\t    .reduce((sum, t) =&gt; sum + Math.abs(t.amount), 0);\n   258\t\n   259\t  const addedFromTransactions = transactions\n   260\t    .filter(t =&gt; isCredit(t) &amp;&amp; new Date(t.createdAt) &gt; new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))\n   261\t    .reduce((sum, t) =&gt; sum + Math.abs(t.amount), 0);\n   262\t\n   263\t  const summaryData = {\n   264\t    // Use VirtFusion balance only - use nullish coalescing to preserve negative balances\n   265\t    balance: balanceData?.virtFusionCredits ?? 0,\n   266\t    virtFusionTokens: balanceData?.virtFusionTokens ?? 0,\n   267\t\n   268\t    // Combine VirtFusion API usage data with all transaction-based spending (VirtFusion + custom credits)\n   269\t    spent30Days: ((usageData &amp;&amp; 'usage' in usageData) ? usageData.usage : 0) + spentFromTransactions,\n   270\t    added30Days: addedFromTransactions,\n   271\t  };\n...\nPath: client/src/components/billing/CustomCreditsPayPalCheckout.tsx\n...\n    33\t    onSuccess: (data) =&gt; {\n    34\t      setIsProcessing(false);\n    35\t      toast({\n    36\t        title: \&quot;Credits Added Successfully!\&quot;,\n    37\t        description: `$${amount.toFixed(2)} has been added to your ${brandingData?.custom_credits_name?.toLowerCase() || 'custom credits'} balance.`,\n    38\t      });\n    39\t\n    40\t      // Invalidate queries to refresh balance and transactions\n    41\t      queryClient.invalidateQueries({ queryKey: [\&quot;/api/billing/balance\&quot;] });\n    42\t      queryClient.invalidateQueries({ queryKey: [\&quot;/api/billing/custom-credits/transactions\&quot;] });\n    43\t      queryClient.invalidateQueries({ queryKey: [\&quot;/api/transactions\&quot;] }); // Refresh main transactions list\n    44\t    },\n    45\t    onError: (error: any) =&gt; {\n    46\t      setIsProcessing(false);\n    47\t      toast({\n    48\t        title: \&quot;Payment Processing Failed\&quot;,\n    49\t        description: error.message || \&quot;Failed to process payment\&quot;,\n    50\t        variant: \&quot;destructive\&quot;,\n    51\t      });\n    52\t    }\n    53\t  });\n    54\t\n    55\t  const handlePayPalSuccess = async (details: any) =&gt; {\n    56\t    setIsProcessing(true);\n    57\t    \n    58\t    try {\n    59\t      // First verify the payment with PayPal\n    60\t      const verifyResponse = await fetch(\&quot;/api/billing/verify-paypal-payment\&quot;, {\n    61\t        method: \&quot;POST\&quot;,\n    62\t        headers: { \&quot;Content-Type\&quot;: \&quot;application/json\&quot; },\n    63\t        body: JSON.stringify({ orderId: details.id }),\n    64\t      });\n    65\t\n    66\t      if (!verifyResponse.ok) {\n    67\t        throw new Error(\&quot;Payment verification failed\&quot;);\n    68\t      }\n    69\t\n    70\t      const verificationData = await verifyResponse.json();\n    71\t      \n    72\t      // Then add custom credits\n    73\t      await addCustomCreditsMutation.mutateAsync({\n    74\t        amount,\n    75\t        paymentId: details.id,\n    76\t        verificationData,\n    77\t      });\n    78\t    } catch (error: any) {\n    79\t      toast({\n    80\t        title: \&quot;Payment Processing Error\&quot;,\n    81\t        description: error.message || \&quot;Failed to process payment\&quot;,\n    82\t        variant: \&quot;destructive\&quot;,\n    83\t      });\n    84\t      setIsProcessing(false);\n    85\t    }\n    86\t  };\n...\nPath: md-docs/dual-billing-system.md\n...\n    37\t\n    38\t#### `dns_plans`\n    39\t- Pricing structure for DNS service tiers\n    40\t- Three default plans: Basic ($5), Pro ($15), Enterprise ($50)\n    41\t- Configurable features and limits\n    42\t\n    43\t#### `dns_plan_subscriptions`\n    44\t- User subscription management for DNS plans\n    45\t- Tracks subscription status, dates, and auto-renewal settings\n    46\t\n    47\t## API Endpoints\n    48\t\n    49\t### Enhanced Billing Endpoints\n    50\t\n    51\t#### `GET /api/billing/balance`\n    52\t- Returns both VirtFusion tokens AND custom credits\n    53\t- Unified balance response for frontend\n    54\t\n    55\t#### `POST /api/billing/custom-credits/add`\n    56\t- PayPal integration for custom credit purchases\n    57\t- Server-side payment verification\n    58\t- Amount validation ($1-$1000 range)\n    59\t- Transaction logging with audit trail\n...\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;a85ac85f-f0ff-47be-975c-622d0a8ac1e3;toolu_vrtx_01CYhHjMugmBkUM7uUzdiWkf&quot;:{&quot;requestId&quot;:&quot;a85ac85f-f0ff-47be-975c-622d0a8ac1e3&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01CYhHjMugmBkUM7uUzdiWkf&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;The following code sections were retrieved:\nPath: server/routes_new.ts\n...\n  4603\t\n  4604\t      const newBalance = currentBalance - plan.price;\n  4605\t      const now = new Date();\n  4606\t\n  4607\t      // Calculate billing cycle end date - always end on the last day of the current month\n  4608\t      // This ensures monthly billing cycles align with calendar months starting on the 1st\n  4609\t      const endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // Last day of current month\n  4610\t      const nextPaymentDate = new Date(endDate.getTime() - 3 * 24 * 60 * 60 * 1000); // 3 days before expiry\n  4611\t\n  4612\t      // Get dynamic custom credits name for transaction description\n  4613\t      const customCreditsName = await getCustomCreditsName();\n...\n  4739\t\n  4740\t      if (activeSubscriptions.length === 0) {\n  4741\t        return res.status(404).json({ error: \&quot;No active DNS plan subscription found\&quot; });\n  4742\t      }\n  4743\t\n  4744\t      // Check if user already has the target plan\n  4745\t      const hasTargetPlan = activeSubscriptions.some(sub =&gt; sub.planId === planId);\n  4746\t      if (hasTargetPlan) {\n  4747\t        return res.status(400).json({ error: \&quot;You are already subscribed to this plan\&quot; });\n  4748\t      }\n  4749\t\n  4750\t      // For billing calculation, use the highest-tier current plan\n  4751\t      const currentSubscription = activeSubscriptions.sort((a, b) =&gt; b.plan!.price - a.plan!.price)[0];\n  4752\t\n  4753\t      const currentPlan = currentSubscription.plan!;\n  4754\t\n  4755\t      // Calculate prorated amount based on proper monthly billing cycle\n  4756\t      // For Free plans with far-future endDate, calculate from now to end of current month\n  4757\t      const now = new Date();\n  4758\t      let billingCycleEndDate;\n  4759\t\n  4760\t      if (currentSubscription.endDate.getFullYear() &gt; 2050) {\n  4761\t        // This is a Free plan with far-future endDate, calculate proper monthly cycle\n  4762\t        billingCycleEndDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999); // End of current month\n  4763\t      } else {\n  4764\t        // This is a paid plan with proper billing cycle\n  4765\t        billingCycleEndDate = new Date(currentSubscription.endDate);\n  4766\t      }\n  4767\t\n  4768\t      const daysRemaining = Math.max(0, Math.ceil((billingCycleEndDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));\n  4769\t      const proratedAmount = (newPlan.price - currentPlan.price) * (daysRemaining / 30);\n  4770\t\n  4771\t      const isUpgrade = newPlan.price &gt; currentPlan.price;\n  4772\t      const isDowngrade = newPlan.price &lt; currentPlan.price;\n  4773\t      const isFreeDowngrade = newPlan.price === 0;\n  4774\t\n  4775\t      // For upgrades, check if user has sufficient credits\n  4776\t      if (isUpgrade &amp;&amp; proratedAmount &gt; 0) {\n  4777\t        // Get user credits\n  4778\t        const [userCredits] = await db.select()\n  4779\t          .from(userCreditsTable)\n  4780\t          .where(eq(userCreditsTable.userId, userId))\n  4781\t          .limit(1);\n  4782\t\n  4783\t        const currentBalance = userCredits?.balance || 0;\n  4784\t\n  4785\t        if (currentBalance &lt; proratedAmount) {\n  4786\t          return res.status(400).json({\n  4787\t            error: \&quot;Insufficient custom credits for upgrade\&quot;,\n  4788\t            required: proratedAmount,\n  4789\t            available: currentBalance,\n  4790\t            shortfall: proratedAmount - currentBalance\n  4791\t          });\n  4792\t        }\n  4793\t      }\n...\n  4852\t\n  4853\t          // Create credit transaction record (audit trail)\n  4854\t          await tx.insert(creditTransactionsTable).values({\n  4855\t            userId: userId,\n  4856\t            amount: -proratedAmount,\n  4857\t            type: isUpgrade ? 'dns_plan_upgrade' : 'dns_plan_downgrade',\n  4858\t            description: transactionDescription,\n  4859\t            status: 'completed',\n  4860\t            paymentMethod: customCreditsName.toLowerCase().replace(/\\s+/g, '_'),\n  4861\t            balanceBefore: currentBalance,\n  4862\t            balanceAfter: newBalance,\n  4863\t            metadata: {\n  4864\t              oldPlanId: currentPlan.id,\n  4865\t              oldPlanName: currentPlan.name,\n  4866\t              newPlanId: newPlan.id,\n  4867\t              newPlanName: newPlan.name,\n  4868\t              daysRemaining: daysRemaining,\n  4869\t              proratedAmount: proratedAmount,\n  4870\t              mainTransactionId: createdTransaction[0].id\n  4871\t            }\n  4872\t          });\n  4873\t        }\n...\nPath: client/src/pages/billing-page.tsx\n...\n   118\t\n   119\t\n   120\t\n   121\t  // Fetch balance data (both VirtFusion tokens and custom credits)\n   122\t  const { data: balanceData } = useQuery&lt;{\n   123\t    virtFusionCredits: number,\n   124\t    virtFusionTokens: number,\n   125\t    customCredits: number\n   126\t  }&gt;({\n   127\t    queryKey: [\&quot;/api/billing/balance\&quot;],\n   128\t  });\n   129\t\n   130\t  // Fetch VirtFusion usage data for last 30 days\n   131\t  const { data: usageData, isError: usageError, error: usageErrorData } = useQuery&lt;{ usage: number, rawData: any }&gt;({\n   132\t    queryKey: [\&quot;/api/billing/usage/last30days\&quot;],\n   133\t    staleTime: 300000, // 5 minutes\n   134\t  });\n   135\t\n   136\t  // Log usage data when it changes\n   137\t  React.useEffect(() =&gt; {\n   138\t    if (usageData) {\n   139\t      console.log(\&quot;VirtFusion usage data:\&quot;, usageData);\n   140\t    }\n   141\t    if (usageError) {\n   142\t      console.error(\&quot;VirtFusion usage API error:\&quot;, usageErrorData);\n   143\t    }\n   144\t  }, [usageData, usageError, usageErrorData]);\n...\n   250\t\n   251\t  // Calculate billing summary combining both VirtFusion and custom credit data\n   252\t  const hasVirtFusionBalance = balanceData?.virtFusionCredits &amp;&amp; balanceData.virtFusionCredits &gt; 0;\n   253\t\n   254\t  // Calculate the spent and added amounts for the last 30 days from transactions (includes both VirtFusion and custom credits)\n   255\t  const spentFromTransactions = transactions\n   256\t    .filter(t =&gt; isDebit(t) &amp;&amp; new Date(t.createdAt) &gt; new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))\n   257\t    .reduce((sum, t) =&gt; sum + Math.abs(t.amount), 0);\n   258\t\n   259\t  const addedFromTransactions = transactions\n   260\t    .filter(t =&gt; isCredit(t) &amp;&amp; new Date(t.createdAt) &gt; new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))\n   261\t    .reduce((sum, t) =&gt; sum + Math.abs(t.amount), 0);\n   262\t\n   263\t  const summaryData = {\n   264\t    // Use VirtFusion balance only - use nullish coalescing to preserve negative balances\n   265\t    balance: balanceData?.virtFusionCredits ?? 0,\n   266\t    virtFusionTokens: balanceData?.virtFusionTokens ?? 0,\n   267\t\n   268\t    // Combine VirtFusion API usage data with all transaction-based spending (VirtFusion + custom credits)\n   269\t    spent30Days: ((usageData &amp;&amp; 'usage' in usageData) ? usageData.usage : 0) + spentFromTransactions,\n   270\t    added30Days: addedFromTransactions,\n   271\t  };\n...\nPath: md-docs/dual-billing-system.md\n     1\t# Dual Billing System Implementation\n     2\t\n     3\t## Overview\n     4\t\n     5\tSkyPANEL now implements a comprehensive dual billing system that separates VirtFusion VPS services from other platform services. This system maintains the existing VirtFusion integration while adding a new custom credit system for DNS plans, dedicated servers, and future services.\n     6\t\n     7\t## System Architecture\n     8\t\n     9\t### VirtFusion Tokens\n    10\t- **Purpose**: Exclusively for VPS services\n    11\t- **Management**: Via VirtFusion API\n    12\t- **Storage**: External (VirtFusion infrastructure)\n    13\t- **Exchange Rate**: 100 tokens = $1.00 USD\n    14\t- **Payment**: PayPal integration\n...\n    37\t\n    38\t#### `dns_plans`\n    39\t- Pricing structure for DNS service tiers\n    40\t- Three default plans: Basic ($5), Pro ($15), Enterprise ($50)\n    41\t- Configurable features and limits\n    42\t\n    43\t#### `dns_plan_subscriptions`\n    44\t- User subscription management for DNS plans\n    45\t- Tracks subscription status, dates, and auto-renewal settings\n    46\t\n    47\t## API Endpoints\n    48\t\n    49\t### Enhanced Billing Endpoints\n    50\t\n    51\t#### `GET /api/billing/balance`\n    52\t- Returns both VirtFusion tokens AND custom credits\n    53\t- Unified balance response for frontend\n    54\t\n    55\t#### `POST /api/billing/custom-credits/add`\n    56\t- PayPal integration for custom credit purchases\n    57\t- Server-side payment verification\n    58\t- Amount validation ($1-$1000 range)\n    59\t- Transaction logging with audit trail\n...\nPath: .github/copilot/dual-billing-system.md\n     1\t# SkyPANEL Dual Billing System\n     2\t\n     3\t## Overview\n     4\tThe Dual Billing System in SkyPANEL provides a comprehensive financial infrastructure that separates VirtFusion VPS services from other platform services. It combines VirtFusion token management with a custom credit system, providing flexible payment options through PayPal integration.\n     5\t\n     6\t## Core Components\n     7\t\n     8\t### VirtFusion Token Management\n     9\t- **Purpose**: Exclusively for VPS services management\n    10\t- **Storage**: External (VirtFusion infrastructure)\n    11\t- **Exchange Rate**: 100 tokens = $1.00 USD\n    12\t- **API Integration**: Complete VirtFusion API integration for token purchases and management\n    13\t- **Transaction Tracking**: Synchronized with SkyPANEL transaction history\n...\n   132\t\n   133\t// Add custom credits\n   134\trouter.post('/api/billing/custom-credits/add', authMiddleware, async (req, res) =&gt; {\n   135\t  const { amount } = req.body;\n   136\t  \n   137\t  try {\n   138\t    // Validate amount\n   139\t    if (!amount || amount &lt; 1 || amount &gt; 1000) {\n   140\t      return res.status(400).json({ error: 'Invalid amount. Must be between $1 and $1000.' });\n   141\t    }\n   142\t    \n   143\t    // Create PayPal order\n   144\t    const order = await paypalService.createOrder(amount, 'Custom Credits Purchase');\n   145\t    \n   146\t    return res.json({ orderId: order.id });\n   147\t  } catch (error) {\n   148\t    console.error('Error creating order:', error);\n   149\t    return res.status(500).json({ error: 'Failed to create order' });\n   150\t  }\n   151\t});\n...\n   521\t    \n   522\t    // Create transaction record\n   523\t    await tx.insert(creditTransactionsTable).values({\n   524\t      userId,\n   525\t      amount,\n   526\t      type,\n   527\t      status: 'completed',\n   528\t      paymentMethod: paymentId ? 'paypal' : 'admin',\n   529\t      paymentId,\n   530\t      adminUserId: metadata?.adminUserId,\n   531\t      adminReason: metadata?.adminReason,\n   532\t      balanceBefore: currentBalance,\n   533\t      balanceAfter: newBalance,\n   534\t      metadata: metadata || null,\n   535\t      createdAt: new Date()\n   536\t    });\n   537\t  });\n   538\t}\n   539\t\n   540\t// Using custom credits for a service\n   541\texport async function useCustomCredits(\n   542\t  userId: number,\n   543\t  amount: number,\n   544\t  serviceType: string,\n   545\t  serviceId: string,\n   546\t  metadata?: Record&lt;string, any&gt;\n   547\t): Promise&lt;boolean&gt; {\n   548\t  let success = false;\n...\nPath: md-docs/dual-billing-implementation-status.md\n...\n    15\t\n    16\t### Backend API Implementation\n    17\t- ✅ **Enhanced Balance Endpoint**: `/api/billing/balance` now returns both VirtFusion tokens AND custom credits\n    18\t- ✅ **Custom Credits Purchase**: `/api/billing/custom-credits/add` with PayPal integration\n    19\t- ✅ **Transaction History**: `/api/billing/custom-credits/transactions` with pagination\n    20\t- ✅ **Admin Management**: Complete CRUD operations for admin credit management\n    21\t  - `GET /api/admin/users/:id/custom-credits` - View balance and transactions\n    22\t  - `POST /api/admin/users/:id/custom-credits` - Add credits with audit trail\n    23\t  - `DELETE /api/admin/users/:id/custom-credits` - Remove credits with confirmation\n...\nPath: client/src/components/billing/CustomCreditsPayPalCheckout.tsx\n...\n    10\t\n    11\texport function CustomCreditsPayPalCheckout({ amount }: CustomCreditsPayPalCheckoutProps) {\n    12\t  const [isProcessing, setIsProcessing] = useState(false);\n    13\t  const { toast } = useToast();\n    14\t  const queryClient = useQueryClient();\n    15\t  const [{ isPending }] = usePayPalScriptReducer();\n    16\t\n    17\t  // Fetch branding data for custom credits name\n    18\t  const { data: brandingData } = useQuery&lt;{\n    19\t    company_name: string;\n    20\t    custom_credits_name?: string;\n    21\t  }&gt;({\n    22\t    queryKey: ['/api/settings/branding'],\n    23\t  });\n    24\t\n    25\t  // Mutation for adding custom credits\n    26\t  const addCustomCreditsMutation = useMutation({\n    27\t    mutationFn: async (data: { amount: number; paymentId: string; verificationData: any }) =&gt; {\n    28\t      return await apiRequest(\&quot;/api/billing/custom-credits/add\&quot;, {\n    29\t        method: \&quot;POST\&quot;,\n    30\t        body: data\n    31\t      });\n    32\t    },\n...\nPath: md-docs/custom-credit-system.md\n...\n    14\t\n    15\t### Credit Operations\n    16\t- **Purchase**: Buy credits via PayPal integration\n    17\t- **Admin Management**: Administrative credit addition/removal\n    18\t- **Service Payments**: Use credits for DNS plans and other services\n    19\t- **Balance Tracking**: Real-time balance updates and history\n    20\t\n    21\t## Branding Configuration\n    22\t\n    23\t### Admin Settings\n    24\tCredits are configured in the admin panel:\n    25\t- **Path**: `/admin/settings` → Custom Credits tab\n    26\t- **Field**: `custom_credits_name`\n    27\t- **API**: `/api/settings/branding`\n    28\t- **Storage**: Database settings table\n    29\t\n    30\t### Branding Data Structure\n    31\t```javascript\n    32\tinterface BrandingData {\n    33\t  company_name: string;\n    34\t  primary_color: string;\n    35\t  secondary_color: string;\n    36\t  accent_color: string;\n    37\t  custom_credits_name?: string;\n    38\t  custom_credits_symbol?: string;\n    39\t}\n...\n   136\t```\n   137\t\n   138\t### PayPal Configuration\n   139\t```javascript\n   140\tconst paypalConfig = {\n   141\t  clientId: process.env.PAYPAL_CLIENT_ID,\n   142\t  clientSecret: process.env.PAYPAL_CLIENT_SECRET,\n   143\t  environment: process.env.NODE_ENV === 'production' ? 'live' : 'sandbox',\n   144\t  currency: 'USD'\n   145\t};\n...\n   231\t```\n   232\t\n   233\t### Purchase Interface\n   234\t```javascript\n   235\tconst CreditPurchase = ({ brandingData }) =&gt; {\n   236\t  const creditName = brandingData?.custom_credits_name || 'Custom Credits';\n   237\t  \n   238\t  return (\n   239\t    &lt;div className=\&quot;credit-purchase\&quot;&gt;\n   240\t      &lt;h2&gt;Purchase {creditName}&lt;/h2&gt;\n   241\t      &lt;p&gt;Add {creditName} to your account via PayPal&lt;/p&gt;\n   242\t      {/* PayPal integration components */}\n   243\t    &lt;/div&gt;\n   244\t  );\n   245\t};\n   246\t```\n   247\t\n   248\t## API Endpoints\n   249\t\n   250\t### Credit Management\n   251\t```javascript\n   252\t// Get user balance\n   253\tGET /api/billing/custom-credits/balance\n   254\t\n   255\t// Purchase credits\n   256\tPOST /api/billing/custom-credits/add\n   257\t{\n   258\t  amount: number,\n   259\t  paypalOrderId: string\n   260\t}\n   261\t\n   262\t// Admin add credits\n   263\tPOST /api/admin/users/:id/custom-credits/add\n   264\t{\n   265\t  amount: number,\n   266\t  reason: string\n   267\t}\n   268\t\n   269\t// Admin remove credits\n   270\tPOST /api/admin/users/:id/custom-credits/remove\n   271\t{\n   272\t  amount: number,\n   273\t  reason: string\n   274\t}\n   275\t\n   276\t// Get transaction history\n   277\tGET /api/billing/custom-credits/transactions\n   278\t```\n   279\t\n   280\t### Branding Integration\n   281\t```javascript\n   282\t// Get branding settings\n   283\tGET /api/settings/branding\n   284\t\n   285\t// Update branding settings (admin only)\n   286\tPUT /api/settings/branding\n   287\t{\n   288\t  custom_credits_name: string,\n   289\t  custom_credits_symbol?: string\n   290\t}\n...\nPath: server/routes/api-v1-routes.ts\n...\n    76\t\n    77\t/**\n    78\t * @route GET /api/v1/balance\n    79\t * @desc Get user's credit balance\n    80\t * @access Private (API Key with read:billing scope)\n    81\t */\n    82\trouter.get('/balance', requireScope('read:billing'), async (req: Request, res: Response) =&gt; {\n    83\t  try {\n    84\t    const userId = req.user?.id;\n    85\t\n    86\t    if (!userId) {\n    87\t      return res.status(401).json({ error: 'Unauthorized' });\n    88\t    }\n    89\t\n    90\t    // Fetch user's VirtFusion token balance\n    91\t    const [user] = await db\n    92\t      .select({\n    93\t        id: users.id,\n    94\t        virtFusionId: users.virtFusionId,\n    95\t      })\n    96\t      .from(users)\n    97\t      .where(eq(users.id, userId));\n    98\t\n    99\t    if (!user) {\n   100\t      return res.status(404).json({ error: 'User not found' });\n   101\t    }\n   102\t\n   103\t    // Initialize response with VirtFusion data only\n   104\t    const response = {\n   105\t      virtFusionCredits: 0,\n   106\t      virtFusionTokens: 0,\n   107\t      currency: 'USD'\n   108\t    };\n   109\t\n   110\t    // If user has VirtFusion account linked, fetch their tokens\n   111\t    if (user.virtFusionId) {\n   112\t      try {\n   113\t        const { VirtFusionApi } = await import('../virtfusion-api');\n   114\t        const virtFusionApi = new VirtFusionApi();\n   115\t        if (virtFusionApi.isConfigured()) {\n   116\t          // Use the VirtFusion API to get user hourly stats (which contains credit info)\n   117\t          const virtFusionData = await virtFusionApi.getUserHourlyStats(user.id);\n   118\t\n   119\t          if (virtFusionData?.data?.credit?.tokens) {\n   120\t            const tokenAmount = parseFloat(virtFusionData.data.credit.tokens);\n   121\t            const dollarAmount = tokenAmount / 100; // 100 tokens = $1.00 USD\n   122\t\n   123\t            response.virtFusionTokens = tokenAmount || 0;\n   124\t            response.virtFusionCredits = dollarAmount || 0;\n   125\t          }\n   126\t        }\n...\nPath: .github/copilot/custom-credit-system.md\n     1\t# SkyPANEL Custom Credit System\n     2\t\n     3\t## Overview\n     4\tThe Custom Credit System is a comprehensive virtual currency solution that allows administrators to configure branded credits (e.g., \&quot;Sky Credits\&quot;, \&quot;Platform Credits\&quot;) for purchasing services, with full transaction management, admin controls, and PayPal integration.\n     5\t\n     6\t## Core Components\n     7\t\n     8\t### Credit Configuration\n     9\t- Dynamic branding with administrator-configurable credit names\n    10\t- Branded display consistent throughout the UI\n    11\t- Fallback handling to \&quot;Custom Credits\&quot; when not configured\n    12\t- Real-time updates when branding changes\n    13\t\n    14\t### Credit Operations\n    15\t- Purchase credits via PayPal integration\n    16\t- Administrative credit addition/removal\n    17\t- Use credits for DNS plans and other services\n    18\t- Real-time balance tracking and history\n...\nPath: server/routes/api-only-routes.ts\n...\n    66\t\n    67\t// Balance endpoint - requires API key with 'read:billing' scope\n    68\trouter.get('/balance',\n    69\t  apiKeyAuth,\n    70\t  requireScope('read:billing'),\n    71\t  async (req, res) =&gt; {\n    72\t    try {\n    73\t      const { userId } = (req as any).apiKeyUser;\n    74\t\n    75\t      // Get user for VirtFusion token balance\n    76\t      const user = await storage.getUser(userId);\n    77\t      if (!user) {\n    78\t        return res.status(404).json({\n    79\t          error: 'Not Found',\n    80\t          message: 'User not found'\n    81\t        });\n    82\t      }\n    83\t\n    84\t      // Initialize response with VirtFusion data only\n    85\t      const response = {\n    86\t        virtFusionCredits: 0,\n    87\t        virtFusionTokens: 0,\n    88\t        currency: 'USD'\n    89\t      };\n    90\t\n    91\t      // If user has VirtFusion account linked, fetch their tokens\n    92\t      if (user.virtFusionId) {\n    93\t        try {\n    94\t          const { VirtFusionApi } = await import('../virtfusion-api');\n    95\t          const virtFusionApi = new VirtFusionApi();\n    96\t          if (virtFusionApi.isConfigured()) {\n    97\t            // Use the VirtFusion API to get user hourly stats (which contains credit info)\n    98\t            const virtFusionData = await virtFusionApi.getUserHourl...&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;f40aaa6e-516d-40db-9dfa-01deb76587d2;toolu_vrtx_019xkjLb6espb2uimqsbVZGv&quot;:{&quot;requestId&quot;:&quot;f40aaa6e-516d-40db-9dfa-01deb76587d2&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_019xkjLb6espb2uimqsbVZGv&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;The following code sections were retrieved:\nPath: shared/schema.ts\n...\n    87\t\n    88\texport type InsertSession = z.infer&lt;typeof insertSessionSchema&gt;;\n    89\texport type Session = typeof sessions.$inferSelect;\n    90\t\n    91\t// Transactions\n    92\texport const transactions = pgTable(\&quot;transactions\&quot;, {\n    93\t  id: serial(\&quot;id\&quot;).primaryKey(),\n    94\t  userId: integer(\&quot;user_id\&quot;).notNull().references(() =&gt; users.id, { onDelete: 'cascade' }),\n    95\t  amount: real(\&quot;amount\&quot;).notNull(),\n    96\t  type: text(\&quot;type\&quot;).notNull(), // credit, debit\n    97\t  description: text(\&quot;description\&quot;).notNull(),\n    98\t  status: text(\&quot;status\&quot;).notNull().default(\&quot;pending\&quot;), // pending, completed, failed\n    99\t  paymentMethod: text(\&quot;payment_method\&quot;),\n   100\t  paymentId: text(\&quot;payment_id\&quot;),\n   101\t  virtFusionCreditId: text(\&quot;virtfusion_credit_id\&quot;), // VirtFusion credit ID for tracking\n   102\t  createdAt: timestamp(\&quot;created_at\&quot;).defaultNow(),\n   103\t});\n   104\t\n   105\texport const insertTransactionSchema = createInsertSchema(transactions).omit({\n   106\t  id: true,\n   107\t  createdAt: true,\n   108\t});\n   109\t\n   110\texport type InsertTransaction = z.infer&lt;typeof insertTransactionSchema&gt;;\n   111\texport type Transaction = typeof transactions.$inferSelect;\n   112\t\n   113\t// User Credits (Custom Credits System - separate from VirtFusion)\n   114\texport const userCredits = pgTable(\&quot;user_credits\&quot;, {\n   115\t  id: serial(\&quot;id\&quot;).primaryKey(),\n   116\t  userId: integer(\&quot;userId\&quot;).notNull().references(() =&gt; users.id, { onDelete: 'cascade' }).unique(),\n   117\t  balance: real(\&quot;balance\&quot;).notNull().default(0), // Balance in USD\n   118\t  createdAt: timestamp(\&quot;createdAt\&quot;).defaultNow(),\n   119\t  updatedAt: timestamp(\&quot;updatedAt\&quot;).defaultNow(),\n   120\t});\n   121\t\n   122\texport const insertUserCreditsSchema = createInsertSchema(userCredits).omit({\n   123\t  id: true,\n   124\t  createdAt: true,\n   125\t  updatedAt: true,\n   126\t});\n   127\t\n   128\texport type InsertUserCredits = z.infer&lt;typeof insertUserCreditsSchema&gt;;\n   129\texport type UserCredits = typeof userCredits.$inferSelect;\n   130\t\n   131\t// Credit Transactions (Audit trail for custom credit operations)\n   132\texport const creditTransactions = pgTable(\&quot;credit_transactions\&quot;, {\n   133\t  id: serial(\&quot;id\&quot;).primaryKey(),\n   134\t  userId: integer(\&quot;userId\&quot;).notNull().references(() =&gt; users.id, { onDelete: 'cascade' }),\n   135\t  amount: real(\&quot;amount\&quot;).notNull(), // Positive for credits, negative for debits\n   136\t  type: text(\&quot;type\&quot;).notNull(), // 'purchase', 'admin_add', 'admin_remove', 'dns_plan_purchase', 'refund'\n   137\t  description: text(\&quot;description\&quot;).notNull(),\n   138\t  status: text(\&quot;status\&quot;).notNull().default(\&quot;completed\&quot;), // 'pending', 'completed', 'failed'\n   139\t  paymentMethod: text(\&quot;paymentMethod\&quot;), // 'paypal', 'admin', etc.\n   140\t  paymentId: text(\&quot;paymentId\&quot;), // PayPal payment ID or admin reference\n   141\t  adminUserId: integer(\&quot;adminUserId\&quot;).references(() =&gt; users.id, { onDelete: 'set null' }), // Admin who performed the action\n   142\t  adminReason: text(\&quot;adminReason\&quot;), // Reason provided by admin\n   143\t  balanceBefore: real(\&quot;balanceBefore\&quot;).notNull(), // Balance before transaction\n   144\t  balanceAfter: real(\&quot;balanceAfter\&quot;).notNull(), // Balance after transaction\n   145\t  metadata: json(\&quot;metadata\&quot;).default({}), // Additional transaction data\n   146\t  createdAt: timestamp(\&quot;createdAt\&quot;).defaultNow(),\n   147\t});\n   148\t\n   149\texport const insertCreditTransactionSchema = createInsertSchema(creditTransactions).omit({\n   150\t  id: true,\n   151\t  createdAt: true,\n   152\t});\n   153\t\n   154\texport type InsertCreditTransaction = z.infer&lt;typeof insertCreditTransactionSchema&gt;;\n   155\texport type CreditTransaction = typeof creditTransactions.$inferSelect;\n   156\t\n   157\t// DNS Plans (Pricing structure for DNS service tiers)\n   158\texport const dnsPlans = pgTable(\&quot;dns_plans\&quot;, {\n   159\t  id: serial(\&quot;id\&quot;).primaryKey(),\n   160\t  name: text(\&quot;name\&quot;).notNull(), // 'Basic', 'Pro', 'Enterprise'\n   161\t  description: text(\&quot;description\&quot;).notNull(),\n   162\t  price: real(\&quot;price\&quot;).notNull(), // Monthly price in USD\n   163\t  maxDomains: integer(\&quot;maxDomains\&quot;).notNull(), // Maximum domains allowed\n   164\t  maxRecords: integer(\&quot;maxRecords\&quot;).notNull(), // Maximum DNS records per domain\n   165\t  features: json(\&quot;features\&quot;).default([]), // Array of feature strings\n   166\t  isActive: boolean(\&quot;isActive\&quot;).default(true).notNull(),\n   167\t  displayOrder: integer(\&quot;displayOrder\&quot;).default(0),\n   168\t  createdAt: timestamp(\&quot;createdAt\&quot;).defaultNow(),\n   169\t  updatedAt: timestamp(\&quot;updatedAt\&quot;).defaultNow(),\n   170\t});\n...\n   180\t\n   181\t// DNS Plan Subscriptions (User subscription management)\n   182\texport const dnsPlanSubscriptions = pgTable(\&quot;dns_plan_subscriptions\&quot;, {\n   183\t  id: serial(\&quot;id\&quot;).primaryKey(),\n   184\t  userId: integer(\&quot;userId\&quot;).notNull().references(() =&gt; users.id, { onDelete: 'cascade' }),\n   185\t  planId: integer(\&quot;planId\&quot;).notNull().references(() =&gt; dnsPlans.id, { onDelete: 'cascade' }),\n   186\t  status: text(\&quot;status\&quot;).notNull().default(\&quot;active\&quot;), // 'active', 'cancelled', 'expired'\n   187\t  startDate: timestamp(\&quot;startDate\&quot;).notNull(),\n   188\t  endDate: timestamp(\&quot;endDate\&quot;).notNull(),\n   189\t  autoRenew: boolean(\&quot;autoRenew\&quot;).default(true).notNull(),\n   190\t  lastPaymentDate: timestamp(\&quot;lastPaymentDate\&quot;),\n   191\t  nextPaymentDate: timestamp(\&quot;nextPaymentDate\&quot;),\n   192\t  createdAt: timestamp(\&quot;createdAt\&quot;).defaultNow(),\n   193\t  updatedAt: timestamp(\&quot;updatedAt\&quot;).defaultNow(),\n   194\t});\n...\nPath: .github/copilot/dual-billing-system.md\n...\n    29\t\n    30\t```typescript\n    31\t// User Credits (Custom Credits System)\n    32\texport const userCreditsTable = pgTable('user_credits', {\n    33\t  id: serial('id').primaryKey().notNull(),\n    34\t  userId: integer('user_id').notNull().references(() =&gt; usersTable.id, { onDelete: 'cascade' }).unique(),\n    35\t  balance: real('balance').default(0).notNull(),\n    36\t  createdAt: timestamp('created_at').defaultNow(),\n    37\t  updatedAt: timestamp('updated_at').defaultNow()\n    38\t});\n    39\t\n    40\t// Credit Transactions (Audit Trail)\n    41\texport const creditTransactionsTable = pgTable('credit_transactions', {\n    42\t  id: serial('id').primaryKey().notNull(),\n    43\t  userId: integer('user_id').notNull().references(() =&gt; usersTable.id, { onDelete: 'cascade' }),\n    44\t  amount: real('amount').notNull(),\n    45\t  type: text('type').notNull(), // purchase, admin_add, admin_remove, service_purchase, etc.\n    46\t  description: text('description'),\n    47\t  status: text('status').notNull().default('completed'),\n    48\t  paymentMethod: text('payment_method'),\n    49\t  paymentId: text('payment_id'),\n    50\t  adminUserId: integer('admin_user_id').references(() =&gt; usersTable.id),\n    51\t  adminReason: text('admin_reason'),\n    52\t  balanceBefore: real('balance_before').notNull(),\n    53\t  balanceAfter: real('balance_after').notNull(),\n    54\t  metadata: jsonb('metadata'),\n    55\t  createdAt: timestamp('created_at').defaultNow().notNull()\n    56\t});\n    57\t\n    58\t// Integrated with existing transactions table for VirtFusion tokens\n    59\texport const transactionsTable = pgTable('transactions', {\n    60\t  id: uuid('id').primaryKey().defaultRandom(),\n    61\t  userId: uuid('user_id').notNull().references(() =&gt; usersTable.id),\n    62\t  amount: decimal('amount', { precision: 10, scale: 2 }).notNull(),\n    63\t  creditAmount: integer('credit_amount'),\n    64\t  type: text('type').notNull(),\n    65\t  status: text('status').notNull(),\n    66\t  description: text('description'),\n    67\t  metadata: jsonb('metadata'),\n    68\t  createdAt: timestamp('created_at').defaultNow().notNull(),\n    69\t  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n    70\t  paypalOrderId: text('paypal_order_id'),\n    71\t  virtFusionCreditId: text('virtfusion_credit_id')\n    72\t});\n    73\t\n    74\t// DNS Plans pricing (uses Custom Credits)\n    75\texport const dnsPlansTable = pgTable('dns_plans', {\n    76\t  id: serial('id').primaryKey().notNull(),\n    77\t  name: text('name').notNull(),\n    78\t  description: text('description'),\n    79\t  price: real('price').notNull(),\n    80\t  domainLimit: integer('domain_limit').notNull(),\n    81\t  recordLimit: integer('record_limit').notNull(),\n    82\t  isActive: boolean('is_active').default(true).notNull(),\n    83\t  createdAt: timestamp('created_at').defaultNow().notNull(),\n    84\t  updatedAt: timestamp('updated_at').defaultNow().notNull()\n    85\t});\n...\n   484\t\n   485\t```typescript\n   486\t// Adding custom credits (server-side)\n   487\texport async function addCustomCredits(\n   488\t  userId: number,\n   489\t  amount: number,\n   490\t  type: string,\n   491\t  paymentId?: string | null,\n   492\t  metadata?: Record&lt;string, any&gt;\n   493\t): Promise&lt;void&gt; {\n   494\t  // Use transaction to ensure data integrity\n   495\t  await db.transaction(async (tx) =&gt; {\n   496\t    // Get current balance\n   497\t    const userCredit = await tx.query.userCreditsTable.findFirst({\n   498\t      where: eq(userCreditsTable.userId, userId)\n   499\t    });\n   500\t    \n   501\t    const currentBalance = userCredit?.balance || 0;\n   502\t    const newBalance = currentBalance + amount;\n   503\t    \n   504\t    // Create or update user balance\n   505\t    if (userCredit) {\n   506\t      await tx\n   507\t        .update(userCreditsTable)\n   508\t        .set({\n   509\t          balance: newBalance,\n   510\t          updatedAt: new Date()\n   511\t        })\n   512\t        .where(eq(userCreditsTable.userId, userId));\n   513\t    } else {\n   514\t      await tx.insert(userCreditsTable).values({\n   515\t        userId,\n   516\t        balance: amount,\n   517\t        createdAt: new Date(),\n   518\t        updatedAt: new Date()\n   519\t      });\n   520\t    }\n...\nPath: .github/copilot/custom-credit-system.md\n...\n    19\t\n    20\t## Database Schema\n    21\t\n    22\t```typescript\n    23\t// Credit transaction table\n    24\texport const transactionsTable = pgTable('transactions', {\n    25\t  id: uuid('id').primaryKey().defaultRandom(),\n    26\t  userId: uuid('user_id').notNull().references(() =&gt; usersTable.id),\n    27\t  amount: decimal('amount', { precision: 10, scale: 2 }).notNull(),\n    28\t  creditAmount: integer('credit_amount'),\n    29\t  type: text('type').notNull(),\n    30\t  status: text('status').notNull(),\n    31\t  description: text('description'),\n    32\t  metadata: jsonb('metadata'),\n    33\t  createdAt: timestamp('created_at').defaultNow().notNull(),\n    34\t  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n    35\t  paypalOrderId: text('paypal_order_id'),\n    36\t  virtFusionCreditId: text('virtfusion_credit_id')\n    37\t});\n...\nPath: md-docs/dual-billing-implementation-status.md\n     1\t# Dual Billing System - Implementation Status\n     2\t\n     3\t## ✅ Completed Implementation\n     4\t\n     5\t### Database Schema &amp; Migration\n     6\t- ✅ **Database Tables Created**: All 4 new tables successfully created\n     7\t  - `user_credits`: Custom credit balances (separate from VirtFusion)\n     8\t  - `credit_transactions`: Complete audit trail for custom credit operations\n     9\t  - `dns_plans`: DNS service pricing tiers (Basic: $5, Pro: $15, Enterprise: $50)\n    10\t  - `dns_plan_subscriptions`: User DNS plan subscription management\n    11\t\n    12\t- ✅ **Schema Validation**: All tables accessible with proper foreign key constraints\n    13\t- ✅ **Migration Scripts**: Working migration and fix scripts available\n    14\t- ✅ **Test Suite**: Comprehensive test script validates all functionality\n...\nPath: md-docs/database-schema.md\n...\n   201\t\n   202\t### Billing Relationships\n   203\t- One-to-Many: Invoice → Transactions\n   204\t- Many-to-One: Invoice → User\n   205\t- Many-to-One: Transaction → User\n   206\t- Many-to-One: Transaction → Invoice (optional)\n   207\t\n   208\t### Support Relationships\n   209\t- One-to-Many: Ticket → TicketMessages\n   210\t- Many-to-One: Ticket → User (creator)\n   211\t- Many-to-One: Ticket → User (assigned_to)\n   212\t\n   213\t## Indexes\n   214\t\n   215\t### Users Table\n   216\t- Primary Key: id\n   217\t- Unique: email\n   218\t- Unique: username\n   219\t- Index: status\n   220\t- Index: created_at\n   221\t\n   222\t### Sessions Table\n   223\t- Primary Key: id\n   224\t- Index: user_id\n   225\t- Index: token (unique)\n   226\t- Index: expires_at\n   227\t\n   228\t### Servers Table\n   229\t- Primary Key: id\n   230\t- Index: user_id\n   231\t- Index: status\n   232\t- Index: node_id\n   233\t- Index: package_id\n   234\t\n   235\t### Invoices Table\n   236\t- Primary Key: id\n   237\t- Index: user_id\n   238\t- Index: status\n   239\t- Index: due_date\n...\nPath: md-docs/billing-system.md\n     1\t# Billing System\n     2\t\n     3\t## Overview\n     4\tThe Billing System in SkyPANEL manages all financial transactions, subscriptions, and invoicing for the platform. It integrates with payment gateways, tracks usage, and handles billing cycles for both customers and administrators.\n     5\t\n     6\t## Table of Contents\n     7\t- [Features](#features)\n     8\t- [Architecture](#architecture)\n     9\t- [Pricing Models](#pricing-models)\n    10\t- [Payment Gateways](#payment-gateways)\n    11\t- [Subscription Management](#subscription-management)\n    12\t- [Invoicing](#invoicing)\n    13\t- [Usage Tracking](#usage-tracking)\n    14\t- [Tax Handling](#tax-handling)\n    15\t- [Reporting](#reporting)\n    16\t- [Security](#security)\n    17\t- [Error Handling](#error-handling)\n    18\t- [Configuration](#configuration)\n    19\t\n    20\t## Features\n...\n    33\t\n    34\t### Components\n    35\t- **BillingService**: Core billing logic\n    36\t- **PaymentProcessor**: Handles payment gateway integration\n    37\t- **InvoiceGenerator**: Creates and manages invoices\n    38\t- **UsageTracker**: Tracks resource usage for billing\n    39\t- **TaxCalculator**: Handles tax calculations\n    40\t- **NotificationService**: Sends billing-related notifications\n    41\t\n    42\t### Data Flow\n    43\t1. Subscription created/updated\n    44\t2. Usage data collected\n    45\t3. Billing cycle ends\n    46\t4. Invoice generated\n    47\t5. Payment processed\n    48\t6. Receipt sent\n    49\t7. Records updated\n    50\t\n    51\t## Pricing Models\n    52\t\n    53\t### Subscription Plans\n    54\t1. **Fixed Price**\n    55\t   - Monthly/Annual billing\n    56\t   - Feature-based tiers\n    57\t   - Flat rate per period\n    58\t\n    59\t2. **Usage-Based**\n    60\t   - Pay-per-use pricing\n    61\t   - Tiered pricing\n    62\t   - Overage charges\n...\n   103\t```\n   104\t\n   105\t## Subscription Management\n   106\t\n   107\t### Subscription Lifecycle\n   108\t1. **Trial**\n   109\t   - No payment required\n   110\t   - Limited features/duration\n   111\t   - Converts to paid on completion\n   112\t\n   113\t2. **Active**\n   114\t   - Regular billing cycles\n   115\t   - Full feature access\n   116\t   - Usage tracking active\n   117\t\n   118\t3. **Past Due**\n   119\t   - Payment failed\n   120\t   - Grace period active\n   121\t   - Limited functionality\n   122\t\n   123\t4. **Canceled**\n   124\t   - End of billing period\n   125\t   - Data retention period\n   126\t   - Can be reactivated\n   127\t\n   128\t### Webhook Events\n   129\t- `subscription.created`\n   130\t- `subscription.updated`\n   131\t- `subscription.canceled`\n   132\t- `subscription.renewed`\n   133\t- `subscription.payment_failed`\n   134\t\n   135\t## Invoicing\n   136\t\n   137\t### Invoice Generation\n   138\t1. **Automatic**\n   139\t   - End of billing cycle\n   140\t   - Usage-based charges\n   141\t   - Recurring subscriptions\n   142\t\n   143\t2. **Manual**\n   144\t   - One-time charges\n   145\t   - Adjustments\n   146\t   - Pro-rated charges\n   147\t\n   148\t### Invoice Components\n   149\t- Header (logo, details)\n   150\t- Billing/Shipping info\n   151\t- Line items with descriptions\n   152\t- Subtotals and totals\n   153\t- Tax breakdown\n   154\t- Payment instructions\n   155\t- Due date\n   156\t\n   157\t## Usage Tracking\n   158\t\n   159\t### Tracked Resources\n   160\t- Compute hours\n   161\t- Storage usage\n   162\t- Bandwidth\n   163\t- API requests\n   164\t- Support tickets\n   165\t- Additional services\n   166\t\n   167\t### Usage Collection\n   168\t1. **Real-time**\n   169\t   - API calls\n   170\t   - Resource provisioning\n   171\t   - Active sessions\n   172\t\n   173\t2. **Batch**\n   174\t   - Hourly/daily aggregation\n   175\t   - System metrics\n   176\t   - Log analysis\n...\n   263\t\n   264\t### Database Tables\n   265\t1. `subscriptions`\n   266\t2. `invoices`\n   267\t3. `payments`\n   268\t4. `payment_methods`\n   269\t5. `credits`\n   270\t6. `usage_records`\n   271\t7. `tax_rates`\n   272\t\n   273\t## Best Practices\n   274\t\n   275\t### Implementation\n   276\t- Idempotent operations\n   277\t- Webhook idempotency keys\n   278\t- Comprehensive logging\n   279\t- Audit trails\n   280\t\n   281\t### Operations\n   282\t- Regular reconciliation\n   283\t- Backup payment methods\n   284\t- Dunning management\n   285\t- Tax compliance\n   286\t\n   287\t## Troubleshooting\n   288\t\n   289\t### Common Issues\n   290\t1. **Payment Failures**\n   291\t   - Check card details\n   292\t   - Verify address\n   293\t   - Contact payment provider\n   294\t   - Review fraud filters\n   295\t\n   296\t2. **Webhook Issues**\n   297\t   - Verify endpoint URL\n   298\t   - Check signature verification\n   299\t   - Review logs\n   300\t   - Test with webhook debugger\n   301\t\n   302\t3. **Tax Calculation**\n   303\t   - Verify address validation\n   304\t   - Check tax nexus settings\n   305\t   - Review tax certificates\n   306\t   - Validate tax IDs\n...\nPath: md-docs/transaction-type-system.md\n     1\t# Transaction Type System\n     2\t\n     3\t## Overview\n     4\t\n     5\tThis document describes the comprehensive transaction type system implemented in SkyPANEL, covering all transaction types, their classifications, display formatting, and branding integration.\n     6\t\n     7\t## Transaction Types\n     8\t\n     9\t### Core Transaction Types\n    10\t\n    11\t#### VirtFusion Transactions\n    12\t- **`virtfusion_credit`** - VirtFusion token purchases\n    13\t- **`virtfusion_credit_removal`** - VirtFusion token removals\n    14\t- **`virtfusion_deduction`** - VirtFusion token usage/deductions\n    15\t- **`credit`** - Legacy VirtFusion credit transactions\n    16\t\n    17\t#### Custom Credit Transactions\n    18\t- **`custom_credit`** - Custom credit purchases via PayPal\n    19\t- **`admin_credit_add`** - Administrative credit additions\n    20\t- **`admin_credit_remove`** - Administrative credit removals\n...\nPath: server/routes_new.ts\n...\n  5347\t\n  5348\t      try {\n  5349\t        // Start transaction to ensure data consistency\n  5350\t        await db.transaction(async (tx) =&gt; {\n  5351\t          // Update user credits balance\n  5352\t          await tx.update(userCreditsTable)\n  5353\t            .set({\n  5354\t              balance: newBalance,\n  5355\t              updatedAt: new Date()\n  5356\t            })\n  5357\t            .where(eq(userCreditsTable.userId, userId));\n  5358\t\n  5359\t          // Create credit transaction record (for audit trail)\n  5360\t          await tx.insert(creditTransactionsTable).values({\n  5361\t            userId: userId,\n  5362\t            amount: amount,\n  5363\t            type: 'purchase',\n  5364\t            description: `${customCreditsName} purchase via PayPal`,\n  5365\t            status: 'completed',\n  5366\t            paymentMethod: 'paypal',\n  5367\t            paymentId: paymentId,\n  5368\t            balanceBefore: currentBalance,\n  5369\t            balanceAfter: newBalance,\n  5370\t            metadata: {\n  5371\t              verificationData,\n  5372\t              mainTransactionId: createdTransaction.id // Link to main transaction\n  5373\t            }\n  5374\t          });\n  5375\t        });\n...\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;bf731548-ea63-4a48-a675-8af47e98dc50;toolu_vrtx_01SuqK9cw5mWBVGmQSAC8ZKR&quot;:{&quot;requestId&quot;:&quot;bf731548-ea63-4a48-a675-8af47e98dc50&quot;,&quot;toolUseId&quot;:&quot;toolu_vrtx_01SuqK9cw5mWBVGmQSAC8ZKR&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;The following code sections were retrieved:\nPath: server/routes/api-v1-routes.ts\n...\n   109\t\n   110\t    // If user has VirtFusion account linked, fetch their tokens\n   111\t    if (user.virtFusionId) {\n   112\t      try {\n   113\t        const { VirtFusionApi } = await import('../virtfusion-api');\n   114\t        const virtFusionApi = new VirtFusionApi();\n   115\t        if (virtFusionApi.isConfigured()) {\n   116\t          // Use the VirtFusion API to get user hourly stats (which contains credit info)\n   117\t          const virtFusionData = await virtFusionApi.getUserHourlyStats(user.id);\n   118\t\n   119\t          if (virtFusionData?.data?.credit?.tokens) {\n   120\t            const tokenAmount = parseFloat(virtFusionData.data.credit.tokens);\n   121\t            const dollarAmount = tokenAmount / 100; // 100 tokens = $1.00 USD\n   122\t\n   123\t            response.virtFusionTokens = tokenAmount || 0;\n   124\t            response.virtFusionCredits = dollarAmount || 0;\n   125\t          }\n   126\t        }\n...\nPath: server/virtfusion-user-service.ts\n...\n     4\t\n     5\t/**\n     6\t * Service for handling VirtFusion user operations\n     7\t */\n     8\texport class VirtFusionUserService {\n     9\t  /**\n    10\t   * Get VirtFusion user creation settings from database\n    11\t   * @returns Settings object with user creation parameters\n    12\t   */\n    13\t  private static async getUserCreationSettings(): Promise&lt;{\n    14\t    selfService: number;\n    15\t    selfServiceHourlyCredit: boolean;\n    16\t    selfServiceHourlyResourcePack: number;\n    17\t    defaultResourcePack: number;\n    18\t  }&gt; {\n    19\t    // Get settings from database with default fallbacks\n    20\t    const selfServiceSetting = await storage.getSetting('virtfusion_self_service');\n    21\t    const selfServiceCreditSetting = await storage.getSetting('virtfusion_self_service_hourly_credit');\n    22\t    const selfServicePackSetting = await storage.getSetting('virtfusion_self_service_hourly_resource_pack_id');\n    23\t    const defaultPackSetting = await storage.getSetting('virtfusion_default_resource_pack_id');\n    24\t    \n    25\t    // Parse settings with fallbacks to defaults\n    26\t    return {\n    27\t      selfService: selfServiceSetting ? parseInt(selfServiceSetting.value, 10) : 1,\n    28\t      selfServiceHourlyCredit: selfServiceCreditSetting ? selfServiceCreditSetting.value === 'true' : true,\n    29\t      selfServiceHourlyResourcePack: selfServicePackSetting ? parseInt(selfServicePackSetting.value, 10) : 1,\n    30\t      defaultResourcePack: defaultPackSetting ? parseInt(defaultPackSetting.value, 10) : 1\n    31\t    };\n    32\t  }\n...\nPath: server/routes/api-only-routes.ts\n...\n    90\t\n    91\t      // If user has VirtFusion account linked, fetch their tokens\n    92\t      if (user.virtFusionId) {\n    93\t        try {\n    94\t          const { VirtFusionApi } = await import('../virtfusion-api');\n    95\t          const virtFusionApi = new VirtFusionApi();\n    96\t          if (virtFusionApi.isConfigured()) {\n    97\t            // Use the VirtFusion API to get user hourly stats (which contains credit info)\n    98\t            const virtFusionData = await virtFusionApi.getUserHourlyStats(user.id);\n    99\t\n   100\t            if (virtFusionData?.data?.credit?.tokens) {\n   101\t              const tokenAmount = parseFloat(virtFusionData.data.credit.tokens);\n   102\t              const dollarAmount = tokenAmount / 100; // 100 tokens = $1.00 USD\n   103\t\n   104\t              response.virtFusionTokens = tokenAmount || 0;\n   105\t              response.virtFusionCredits = dollarAmount || 0;\n   106\t            }\n   107\t          }\n...\nPath: .github/copilot/dual-billing-system.md\n     1\t# SkyPANEL Dual Billing System\n     2\t\n     3\t## Overview\n     4\tThe Dual Billing System in SkyPANEL provides a comprehensive financial infrastructure that separates VirtFusion VPS services from other platform services. It combines VirtFusion token management with a custom credit system, providing flexible payment options through PayPal integration.\n     5\t\n     6\t## Core Components\n     7\t\n     8\t### VirtFusion Token Management\n     9\t- **Purpose**: Exclusively for VPS services management\n    10\t- **Storage**: External (VirtFusion infrastructure)\n    11\t- **Exchange Rate**: 100 tokens = $1.00 USD\n    12\t- **API Integration**: Complete VirtFusion API integration for token purchases and management\n    13\t- **Transaction Tracking**: Synchronized with SkyPANEL transaction history\n...\nPath: md-docs/dual-billing-system.md\n     1\t# Dual Billing System Implementation\n     2\t\n     3\t## Overview\n     4\t\n     5\tSkyPANEL now implements a comprehensive dual billing system that separates VirtFusion VPS services from other platform services. This system maintains the existing VirtFusion integration while adding a new custom credit system for DNS plans, dedicated servers, and future services.\n     6\t\n     7\t## System Architecture\n     8\t\n     9\t### VirtFusion Tokens\n    10\t- **Purpose**: Exclusively for VPS services\n    11\t- **Management**: Via VirtFusion API\n    12\t- **Storage**: External (VirtFusion infrastructure)\n    13\t- **Exchange Rate**: 100 tokens = $1.00 USD\n    14\t- **Payment**: PayPal integration\n...\nPath: server/routes_new.ts\n...\n  4084\t\n  4085\t      // If user has VirtFusion account linked, fetch their tokens\n  4086\t      if (user.virtFusionId) {\n  4087\t        try {\n  4088\t          const virtFusionApi = new VirtFusionApi();\n  4089\t          if (virtFusionApi.isConfigured()) {\n  4090\t            // Use the VirtFusion API to get user hourly stats (which contains credit info)\n  4091\t            const virtFusionData = await virtFusionApi.getUserHourlyStats(user.id);\n  4092\t\n  4093\t            if (virtFusionData?.data?.credit?.tokens) {\n  4094\t              const tokenAmount = parseFloat(virtFusionData.data.credit.tokens);\n  4095\t              const dollarAmount = tokenAmount / 100; // 100 tokens = $1.00 USD\n  4096\t\n  4097\t              response.virtFusionTokens = tokenAmount || 0;\n  4098\t              response.virtFusionCredits = dollarAmount || 0;\n  4099\t            }\n  4100\t          }\n  4101\t        } catch (virtFusionError) {\n  4102\t          console.error(\&quot;Error fetching VirtFusion credits:\&quot;, virtFusionError);\n  4103\t          // Return empty VirtFusion data if API call fails\n  4104\t        }\n  4105\t      }\n...\n  4163\t\n  4164\t      console.log(`User has VirtFusion extRelationId: ${req.user!.virtFusionId}`);\n  4165\t\n  4166\t      // Check VirtFusion API configuration\n  4167\t      const virtFusionApi = new VirtFusionApi();\n  4168\t      await virtFusionApi.updateSettings();\n  4169\t\n  4170\t      // Validate VirtFusion API settings before proceeding\n  4171\t      if (!virtFusionApi.isConfigured()) {\n  4172\t        console.error(\&quot;VirtFusion API is not properly configured\&quot;);\n  4173\t        return res.status(500).json({\n  4174\t          error: \&quot;VirtFusion API configuration is incomplete. Please contact support.\&quot;,\n  4175\t          details: \&quot;Missing API URL or token\&quot;\n  4176\t        });\n  4177\t      }\n  4178\t\n  4179\t      // Calculate the number of tokens to add to VirtFusion\n  4180\t      const tokens = amount * 100; // $1 = 100 tokens\n  4181\t      console.log(`Converting $${amount} to ${tokens} VirtFusion tokens`);\n...\n  7706\t\n  7707\t      // Convert from tokens to dollars (100 tokens = $1.00)\n  7708\t      const creditAmount = tokenAmount;\n  7709\t      const dollarAmount = Number(tokenAmount) / 100;\n  7710\t\n  7711\t      console.log(`Found matching transaction ${transaction.id}: \&quot;${transaction.description}\&quot;`);\n  7712\t      console.log(`Removing credit ID ${creditId} (${creditAmount} tokens = $${dollarAmount}) from VirtFusion for user ${userId}`);\n  7713\t\n  7714\t      // Use direct axios call to VirtFusion API\n  7715\t      const virtFusionApiUrl = process.env.VIRTFUSION_API_URL || 'https://vdc.skyvps360.xyz/api/v1';\n  7716\t      const virtFusionApiToken = process.env.VIRTFUSION_API_TOKEN;\n  7717\t\n  7718\t      if (!virtFusionApiUrl || !virtFusionApiToken) {\n  7719\t        return res.status(500).json({ error: \&quot;VirtFusion API URL or token not configured\&quot; });\n  7720\t      }\n...\nPath: client/src/pages/billing-page.tsx\n...\n   118\t\n   119\t\n   120\t\n   121\t  // Fetch balance data (both VirtFusion tokens and custom credits)\n   122\t  const { data: balanceData } = useQuery&lt;{\n   123\t    virtFusionCredits: number,\n   124\t    virtFusionTokens: number,\n   125\t    customCredits: number\n   126\t  }&gt;({\n   127\t    queryKey: [\&quot;/api/billing/balance\&quot;],\n   128\t  });\n   129\t\n   130\t  // Fetch VirtFusion usage data for last 30 days\n   131\t  const { data: usageData, isError: usageError, error: usageErrorData } = useQuery&lt;{ usage: number, rawData: any }&gt;({\n   132\t    queryKey: [\&quot;/api/billing/usage/last30days\&quot;],\n   133\t    staleTime: 300000, // 5 minutes\n   134\t  });\n   135\t\n   136\t  // Log usage data when it changes\n   137\t  React.useEffect(() =&gt; {\n   138\t    if (usageData) {\n   139\t      console.log(\&quot;VirtFusion usage data:\&quot;, usageData);\n   140\t    }\n   141\t    if (usageError) {\n   142\t      console.error(\&quot;VirtFusion usage API error:\&quot;, usageErrorData);\n   143\t    }\n   144\t  }, [usageData, usageError, usageErrorData]);\n...\nPath: server/virtfusion-api.ts\n     1\timport https from \&quot;https\&quot;;\n     2\timport axios from \&quot;axios\&quot;;\n     3\timport { storage } from \&quot;./storage\&quot;;\n     4\t\n     5\t// VirtFusion API class for centralizing API calls\n     6\texport class VirtFusionApi {\n     7\t  private apiUrl: string;\n     8\t  private apiToken: string;\n     9\t  private sslVerify: boolean;\n    10\t\n    11\t  constructor() {\n    12\t    // Default values - will be updated with getSettings()\n    13\t    // Make sure the URL doesn't have a trailing slash and doesn't include /api/v1 twice\n    14\t    const apiUrl = process.env.VIRTFUSION_API_URL || \&quot;https://skyvps360.xyz\&quot;;\n    15\t    this.apiUrl = apiUrl.endsWith(\&quot;/\&quot;) ? apiUrl.slice(0, -1) : apiUrl;\n    16\t\n    17\t    // Ensure API URL ends with /api/v1\n    18\t    if (!this.apiUrl.endsWith(\&quot;/api/v1\&quot;)) {\n    19\t      this.apiUrl = `${this.apiUrl}/api/v1`;\n    20\t    }\n    21\t\n    22\t    this.apiToken = process.env.VIRTFUSION_API_TOKEN || \&quot;\&quot;;\n    23\t    this.sslVerify = true;\n    24\t  }\n...\n    35\t\n    36\t  // Update API settings from environment variables\n    37\t  async updateSettings() {\n    38\t    try {\n    39\t      console.log(\&quot;VirtFusion API Settings - Current values:\&quot;, {\n    40\t        apiUrl: this.apiUrl,\n    41\t        apiToken: this.apiToken ? \&quot;***\&quot; : \&quot;not set\&quot;,\n    42\t        sslVerify: this.sslVerify,\n    43\t      });\n    44\t\n    45\t      // Try to get settings from database\n    46\t      const apiUrlSetting = await storage.getSetting(\&quot;virtfusion_api_url\&quot;);\n    47\t      const apiTokenSetting = await storage.getSetting(\&quot;virtfusion_api_token\&quot;);\n    48\t      const sslVerifySetting = await storage.getSetting(\&quot;virtfusion_ssl_verify\&quot;);\n    49\t\n    50\t      // Update with database settings if available\n    51\t      if (apiUrlSetting) {\n    52\t        this.apiUrl = apiUrlSetting.value;\n    53\t        // Ensure it ends with /api/v1\n    54\t        if (!this.apiUrl.endsWith(\&quot;/api/v1\&quot;)) {\n    55\t          this.apiUrl = `${this.apiUrl}/api/v1`;\n    56\t        }\n    57\t      }\n    58\t\n    59\t      if (apiTokenSetting) {\n    60\t        this.apiToken = apiTokenSetting.value;\n    61\t      }\n    62\t\n    63\t      if (sslVerifySetting) {\n    64\t        this.sslVerify = sslVerifySetting.value === \&quot;true\&quot;;\n    65\t      }\n    66\t\n    67\t      // Log updated settings\n    68\t      console.log(\&quot;VirtFusion API Settings - Updated values:\&quot;, {\n    69\t        apiUrl: this.apiUrl,\n    70\t        apiToken: this.apiToken ? \&quot;***\&quot; : \&quot;not set\&quot;,\n    71\t        sslVerify: this.sslVerify,\n    72\t      });\n    73\t\n    74\t      return true;\n    75\t    } catch (error) {\n    76\t      console.error(\&quot;Error updating VirtFusion API settings:\&quot;, error);\n    77\t      return false;\n    78\t    }\n    79\t  }\n    80\t\n    81\t  // Test the API connection\n    82\t  async testConnection() {\n    83\t    try {\n    84\t      await this.updateSettings();\n    85\t      return this.request(\&quot;GET\&quot;, \&quot;/account\&quot;);\n    86\t    } catch (error) {\n    87\t      console.error(\&quot;VirtFusion connection test failed:\&quot;, error);\n    88\t      throw error;\n    89\t    }\n    90\t  }\n...\n   123\t\n   124\t      const fullUrl = `${apiBase}${normalizedEndpoint.startsWith(\&quot;/\&quot;) ? normalizedEndpoint : \&quot;/\&quot; + normalizedEndpoint}`;\n   125\t\n   126\t      // Log request details (mask token for security)\n   127\t      const maskedToken =\n   128\t        this.apiToken.length &gt; 8\n   129\t          ? `${this.apiToken.substring(0, 4)}...${this.apiToken.substring(this.apiToken.length - 4)}`\n   130\t          : \&quot;********\&quot;;\n   131\t      console.log(`Making ${method} request to ${fullUrl}`);\n   132\t      console.log(`Using token: ${maskedToken}`);\n   133\t      console.log(`SSL verification: ${this.sslVerify}`);\n   134\t\n   135\t      if (data) {\n   136\t        console.log(`Request data: ${JSON.stringify(data, null, 2)}`);\n   137\t      }\n   138\t\n   139\t      try {\n   140\t        const response = await axios({\n   141\t          method,\n   142\t          url: fullUrl,\n   143\t          headers: {\n   144\t            Authorization: `Bearer ${this.apiToken}`,\n   145\t            \&quot;Content-Type\&quot;: \&quot;application/json\&quot;,\n   146\t            Accept: \&quot;application/json, */*\&quot;,\n   147\t          },\n   148\t          data,\n   149\t          // Apply SSL verification setting\n   150\t          httpsAgent: new https.Agent({ rejectUnauthorized: this.sslVerify }),\n   151\t          // Add a timeout to prevent hanging requests\n   152\t          timeout: 30000,\n   153\t        });\n   154\t\n   155\t        // Log response status\n   156\t        console.log(`VirtFusion API Response status: ${response.status}`);\n   157\t\n   158\t        // Check if response contains data\n   159\t        if (!response.data) {\n   160\t          console.warn(\&quot;Empty response data from VirtFusion API\&quot;);\n   161\t          return null;\n   162\t        }\n...\n   435\t\n   436\t  /**\n   437\t   * Add credit to a user by external relation ID\n   438\t   * @param extRelationId The external relation ID (our user ID)\n   439\t   * @param tokenData Object containing tokens and optional reference data\n   440\t   * @returns API response containing credit ID\n   441\t   */\n   442\t  async addCreditToUser(extRelationId: number, tokenData: {\n   443\t    tokens: number;\n   444\t    reference_1?: number;\n   445\t    reference_2?: string;\n   446\t  }) {\n   447\t    console.log(`Adding ${tokenData.tokens} tokens to user with extRelationId ${extRelationId}`);\n   448\t    return this.request(\n   449\t      \&quot;POST\&quot;,\n   450\t      `/selfService/credit/byUserExtRelationId/${extRelationId}`,\n   451\t      tokenData\n   452\t    );\n   453\t  }\n...\n   615\t\n   616\t  // Get server traffic statistics\n   617\t  async getServerTraffic(serverId: number) {\n   618\t    try {\n   619\t      // Call the traffic statistics endpoint\n   620\t      const response = await this.request(\&quot;GET\&quot;, `/servers/${serverId}/traffic`);\n   621\t      return response;\n   622\t    } catch (error) {\n   623\t      console.error(`Error in getServerTraffic for server ${serverId}:`, error);\n   624\t      throw error;\n   625\t    }\n   626\t  }\n   627\t\n   628\t  // No longer using this method - removed\n   629\t\n   630\t  // Get all hypervisors from VirtFusion API\n   631\t  async getHypervisors() {\n   632\t    return this.request(\&quot;GET\&quot;, \&quot;/compute/hypervisors\&quot;);\n   633\t  }\n   634\t\n   635\t  // Server power management functions\n   636\t\n   637\t  /**\n   638\t   * Boot a server\n   639\t   * @param serverId The server ID\n   640\t   * @returns API response\n   641\t   */\n   642\t  async bootServer(serverId: number) {\n   643\t    console.log(`Booting server ID: ${serverId}`);\n   644\t    return this.request(\&quot;POST\&quot;, `/servers/${serverId}/boot`);\n   645\t  }\n...\n   811\t\n   812\t  /**\n   813\t   * Get user usage statistics by external relation ID (our user ID)\n   814\t   * @param extRelationId The external relation ID (our user ID)\n   815\t   * @param period Optional period for usage data in YYYY-MM-DD format\n   816\t   * @param range Optional range for usage data (d=day, w=week, m=month)\n   817\t   * @returns Usage data from VirtFusion\n   818\t   */\n   819\t  async getUserUsageByExtRelationId(extRelationId: number, period?: string, range: string = \&quot;m\&quot;) {\n   820\t    // Get current date in YYYY-MM-DD format if period is not provided\n   821\t    if (!period) {\n   822\t      const today = new Date();\n   823\t      const year = today.getFullYear();\n   824\t      const month = String(today.getMonth() + 1).padStart(2, '0');\n   825\t      const day = String(today.getDate()).padStart(2, '0');\n   826\t      period = `${year}-${month}-${day}`;\n   827\t    }\n   828\t\n   829\t    const endpoint = `/selfService/usage/byUserExtRelationId/${extRelationId}?period[]=${period}&amp;range=${range}`;\n   830\t    return this.request(\&quot;GET\&quot;, endpoint);\n   831\t  }\n   832\t}\n   833\t\n   834\t// Create a singleton instance of the VirtFusion API client\n   835\texport const virtFusionApi = new VirtFusionApi();...\nPath: md-docs/virtfusion-integration.md\n     1\t# VirtFusion Integration Guide\n     2\t\n     3\tThis document provides comprehensive documentation for the VirtFusion integration in SkyPANEL, including setup, configuration, and usage.\n     4\t\n     5\t## Table of Contents\n     6\t\n     7\t- [Overview](#overview)\n     8\t- [Prerequisites](#prerequisites)\n     9\t- [Setup and Configuration](#setup-and-configuration)\n    10\t- [API Integration](#api-integration)\n    11\t- [Server Management](#server-management)\n    12\t- [User Management](#user-management)\n    13\t- [Billing Integration](#billing-integration)\n    14\t- [Error Handling](#error-handling)\n    15\t- [Troubleshooting](#troubleshooting)\n    16\t- [Best Practices](#best-practices)\n    17\t\n    18\t## Overview\n    19\t\n    20\tSkyPANEL integrates with VirtFusion to provide comprehensive VPS hosting management capabilities. This integration allows users to manage their virtual servers, monitor resources, and handle billing through a unified interface.\n    21\t\n    22\t## Prerequisites\n    23\t\n    24\t- VirtFusion API access\n    25\t- Valid API credentials\n    26\t- Sufficient permissions for the required operations\n    27\t- Network access to the VirtFusion API endpoint\n    28\t\n    29\t## Setup and Configuration\n    30\t\n    31\t### Environment Variables\n    32\t\n    33\tAdd the following environment variables to your `.env` file:\n    34\t\n    35\t```env\n    36\t# VirtFusion Configuration\n    37\tVIRT_FUSION_API_URL=https://api.virtfusion.example.com\n    38\tVIRT_FUSION_API_KEY=your_api_key_here\n    39\tVIRT_FUSION_API_SECRET=your_api_secret_here\n    40\tVIRT_FUSION_WEBHOOK_SECRET=your_webhook_secret\n    41\t```\n    42\t\n    43\t### Initialization\n...\n    63\t\n    64\texport const virtFusionService = new VirtFusionService();\n    65\t```\n    66\t\n    67\t## API Integration\n    68\t\n    69\t### Authentication\n    70\t\n    71\tSkyPANEL uses API key authentication to communicate with the VirtFusion API. The authentication is handled automatically by the `VirtFusionAPI` class.\n    72\t\n    73\t### Rate Limiting\n    74\t\n    75\tThe integration includes built-in rate limiting to prevent hitting VirtFusion API limits:\n    76\t\n    77\t- 60 requests per minute per IP address\n    78\t- Exponential backoff for rate-limited requests\n    79\t- Request queuing for high-volume operations\n    80\t\n    81\t## Server Management\n    82\t\n    83\t### Key Features\n    84\t\n    85\t- Server provisioning\n    86\t- Server status monitoring\n    87\t- Resource usage tracking\n    88\t- Server actions (start, stop, restart, etc.)\n    89\t- Console access\n    90\t\n    91\t### Example: List Servers\n...\n   140\t```\n   141\t\n   142\t## Billing Integration\n   143\t\n   144\t### Key Features\n   145\t\n   146\t- Subscription management\n   147\t- Invoice generation\n   148\t- Payment processing\n   149\t- Usage tracking\n   150\t\n   151\t### Example: Create Subscription\n   152\t\n   153\t```typescript\n   154\tasync createSubscription(subscriptionData: SubscriptionData): Promise&lt;Subscription&gt; {\n   155\t  try {\n   156\t    const response = await this.api.post&lt;Subscri...&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}}},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;mentioned_items&quot;:[],&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;isAgentConversation&quot;:true,&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;07fd80ce-e302-464d-8d1b-f7c9cc13039f&quot;,&quot;draftActiveContextIds&quot;:[&quot;C:/Users/moran/Documents/GitHub/SkyPANELfalsefalse&quot;,&quot;userGuidelines&quot;,&quot;agentMemories&quot;]},&quot;67f52a92-49bf-400c-bde0-4af23ddc0006&quot;:{&quot;id&quot;:&quot;67f52a92-49bf-400c-bde0-4af23ddc0006&quot;,&quot;createdAtIso&quot;:&quot;2025-06-09T14:57:08.747Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-06-09T14:57:08.747Z&quot;,&quot;chatHistory&quot;:[{&quot;request_id&quot;:&quot;15e15691-2910-41f8-8810-2fca4793fdd6&quot;,&quot;uuid&quot;:&quot;4a8dae38-3d2b-46ce-8558-7f949423236c&quot;,&quot;chatItemType&quot;:&quot;agentic-checkpoint-delimiter&quot;,&quot;status&quot;:&quot;success&quot;,&quot;fromTimestamp&quot;:0,&quot;toTimestamp&quot;:1749481028749,&quot;seen_state&quot;:&quot;seen&quot;}],&quot;feedbackStates&quot;:{},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;mentioned_items&quot;:[],&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:false,&quot;extraData&quot;:{&quot;isAgentConversation&quot;:true,&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;78d51fb7-3bf0-406b-ae24-2a993ede8cac&quot;}},&quot;agentExecutionMode&quot;:&quot;manual&quot;,&quot;isPanelCollapsed&quot;:true,&quot;displayedAnnouncements&quot;:[]}" />
      </map>
    </option>
  </component>
</project>
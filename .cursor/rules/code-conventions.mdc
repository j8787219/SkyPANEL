---
description:
globs:
alwaysApply: false
---
# SkyPANEL Code Conventions

## General Conventions

- **TypeScript**: Use TypeScript for type safety throughout the codebase
- **Functional Components**: Use React functional components with hooks
- **Error Handling**: Implement proper error handling with descriptive messages
- **Consistent Naming**:
  - PascalCase for components and types
  - camelCase for variables, functions, and properties
  - UPPER_SNAKE_CASE for constants

## Frontend Patterns

- **React Query**: Use for data fetching and cache management
- **Shadcn/UI Components**: Use for consistent UI elements
- **Tailwind CSS**: Use for styling with utility classes
- **Custom Hooks**: Create reusable logic in custom hooks
- **State Management**: Use React Context for global state when needed

## Backend Patterns

- **Express Routes**: Organize API endpoints by resource type
- **Middleware Pattern**: Use middleware for authentication, validation, and error handling
- **Drizzle ORM**: Use for database operations with type safety
- **Zod Validation**: Validate request data with Zod schemas
- **Service Layer**: Separate business logic into service classes

## API Response Format

Standard API response format for all endpoints:

```typescript
// Success response
{
  data: any, // Response data
  pagination?: {
    currentPage: number,
    totalPages: number,
    totalItems: number,
    itemsPerPage: number
  }
}

// Error response
{
  error: {
    code: string, // Error code
    message: string, // Human-readable message
    details?: any // Additional details
  }
}
```

## Database Patterns

- Use Drizzle ORM for database operations
- Define schema in separate files
- Use migrations for schema changes
- Follow naming conventions:
  - Tables: plural, snake_case (e.g., `users`, `server_packages`)
  - Columns: snake_case (e.g., `created_at`, `user_id`)
  - Foreign keys: `<table_name>_id` (e.g., `user_id`)
